{"version":3,"sources":["shared/config.ts","store/types/vote.ts","store/reducers/vote.ts","store/index.ts","shared/axios.ts","shared/validations.ts","assets/images/wings-logo.svg","components/Icons/Categories/Activism.tsx","components/Icons/Categories/Beauty.tsx","components/Icons/Categories/Content.tsx","components/Icons/Categories/Marketing.tsx","components/Icons/Categories/Entrepreneurship.tsx","components/Icons/Categories/Fashion.tsx","components/Icons/Categories/Film.tsx","components/Icons/Categories/Fitness.tsx","components/Icons/Categories/Leadership.tsx","components/Icons/Categories/Technology.tsx","components/Icons/Categories/Brand.tsx","components/Icons/Categories/Icon360.tsx","components/Icons/Categories/PerformingArts.tsx","components/Icons/Categories/PerformingMusic.tsx","components/Icons/Categories/PersonalDevelopment.tsx","components/Icons/Categories/Photography.tsx","components/Icons/Categories/index.tsx","components/Icons/Badge.tsx","components/Label/index.tsx","components/Icons/Input/Password.jsx","components/Icons/Input/InputSucess.jsx","components/Icons/Input/InputCancel.jsx","components/Input/index.tsx","components/Modal/index.tsx","components/Button/index.tsx","pages/Home/index.tsx","store/actions/vote.ts","components/Icons/General/Goback.tsx","pages/Category/index.tsx","components/Icons/Confirmation/Success.tsx","components/Icons/Confirmation/Failed.tsx","pages/Confirmation/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["classSet","process","votingEnded","ADD_VOTE","CLEAR_VOTES","FETCH_CATEGORIES","initialState","votes","categories","addVote","state","action","payload","clearVotes","fetchCategories","reducer","type","types","composeEnhancers","compose","rootReducer","combineReducers","vote","voteReducer","persistConfig","key","storage","persistedReducer","persistReducer","store","createStore","applyMiddleware","thunk","persistor","persistStore","instance","axios","create","baseURL","headers","signature","appKey","checkValidity","value","rules","isValid","required","trim","minLength","length","maxLength","isEmail","test","isPassword","isPhone","isNumeric","isFullName","Activism","color","width","height","viewBox","fill","d","Beauty","Content","Marketing","Entrepreneurship","clipPath","id","Fashion","Film","Fitness","Leadership","Technology","Brand","Icon360","PerformingArts","stroke","strokeWidth","strokeMiterlimit","strokeLinecap","strokeLinejoin","PerformingMusic","PersonalDevelopment","Photography","CategoriesIcon","category","categoryIcon","Badge","Label","props","className","children","Password","x1","y1","x2","y2","defaultProps","InputSuccess","cx","cy","r","inputCancel","xmlns","Input","appendedItem","inputClassName","messageClassName","hasError","attributes","focused","appendItem","onClick","handleAppendItemClick","isPasswordVisible","InputCancel","theme","label","prependItem","message","onChange","onFocus","onBlur","Modal","isOpen","onClose","Button","disabled","image","style","backgroundImage","Home","isModalOpen","isVotedOpen","voteForm","email","valid","formIsValid","loading","endedAnimation","bg","circle1","circle2","circle3","text","toggleModal","setState","toggleVoted","toggleLoading","toggleAnimation","name","handleInputOnChange","event","elementId","validations","target","updatedFormElement","updatedForm","handleInputFocus","updatedState","updatedNameObject","handleOnSubmit","e","preventDefault","window","alert","confirm","indexOf","split","voteData","post","errorData","response","data","errors","msg","console","log","this","curClassSet","localStorage","getItem","purge","setItem","setTimeout","history","position","maxHeight","overflow","src","WingsAwardLogo","alt","map","idx","alreadyVoted","find","_id","push","pathname","urls","prev","next","href","rel","cat","nominee","nominees","onSubmit","placeholder","backgroundColor","fontSize","padding","to","Component","connect","dispatch","getState","get","Goback","Category","selectedNominee","selectNominee","handleVoteCasted","location","undefined","scrollTo","goBack","description","socialHandle","Success","Failed","Confirmation","confirmed","match","params","voteId","put","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootElement","document","getElementById","hasChildNodes","hydrate","StrictMode","render"],"mappings":"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","file":"static/js/main.16deeb7c.chunk.js","sourcesContent":["// import * as dotenv from 'dotenv';\n// dotenv.config();\n\nexport const environment = process.env.NODE_ENV;\nexport const signature = process.env.REACT_APP_SIGNATURE;\nexport const appKey = process.env.REACT_APP_KEY;\nexport const baseUrl = process.env.REACT_APP_BASE_URL;\nexport const classSet = process.env.REACT_APP_CLASS_SET;\nexport const votingEnded =\n  process.env.REACT_APP_VOTING_ENDED && process.env.REACT_APP_VOTING_ENDED === 'true'\n    ? true\n    : false;\n","export const ADD_VOTE = 'ADD_VOTE';\nexport const CLEAR_VOTES = 'CLEAR_VOTES';\nexport const FETCH_CATEGORIES = 'FETCH_CATEGORIES';\n","import * as types from 'store/types/vote';\nimport categoriesInterface from 'types/category';\n\ninterface IAction {\n  type: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  payload?: any;\n}\n\nexport interface IinitialState {\n  votes: {\n    category: string;\n    nominee: string;\n  }[];\n  categories: categoriesInterface[];\n}\n\nconst initialState: IinitialState = {\n  votes: [],\n  categories: [],\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst addVote = (state: IinitialState, action: IAction) => {\n  return { ...state, votes: [...state.votes, action.payload] };\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst clearVotes = (state: IinitialState, action: IAction) => {\n  return { ...state, votes: [] };\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst fetchCategories = (state: IinitialState, action: IAction) => {\n  return { ...state, categories: action.payload.categories };\n};\n\nconst reducer = (state = initialState, action: IAction): IinitialState => {\n  switch (action.type) {\n    case types.ADD_VOTE:\n      return addVote(state, action);\n    case types.CLEAR_VOTES:\n      return clearVotes(state, action);\n    case types.FETCH_CATEGORIES:\n      return fetchCategories(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { environment } from 'shared/config';\n\n//reducers\nimport voteReducer from './reducers/vote';\n\n//redux dev tools\nconst composeEnhancers =\n  (environment === 'development'\n    ? // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      ((window as any)['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__'] as typeof compose)\n    : null) || compose;\n\n//combining all reducers\nconst rootReducer = combineReducers({\n  vote: voteReducer,\n});\n\nconst persistConfig = {\n  key: 'wingsAwardApp',\n  storage,\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\n//creating a redux store\nconst store = createStore(persistedReducer, composeEnhancers(applyMiddleware(thunk)));\n\nexport default store;\n\nexport const persistor = persistStore(store);\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import axios from 'axios';\n\nimport { signature, appKey, baseUrl } from 'shared/config';\n\nconst instance = axios.create({\n  baseURL: baseUrl,\n  headers: {\n    signature,\n    appKey,\n  },\n});\n\nexport default instance;\n","export const checkValidity = (\n  value: string,\n  rules: { [key: string]: string | number | boolean }\n): boolean => {\n  let isValid = true;\n  if (!rules) {\n    return true;\n  }\n\n  if (rules.required) {\n    isValid = value.trim() !== '' && isValid;\n  }\n\n  if (rules.minLength) {\n    isValid = value.length >= rules.minLength && isValid;\n  }\n\n  if (rules.maxLength) {\n    isValid = value.length <= rules.maxLength && isValid;\n  }\n\n  if (rules.isEmail) {\n    const pattern =\n      /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n    isValid = pattern.test(value) && isValid;\n  }\n\n  if (rules.isPassword) {\n    const pattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n    isValid = pattern.test(value) && isValid;\n  }\n\n  if (rules.isPhone) {\n    const pattern = /^\\+[0-9]?()[0-9](\\s|\\S)(\\d[0-9]{9})$/;\n    isValid = pattern.test(value) && isValid;\n  }\n\n  if (rules.isNumeric) {\n    const pattern = /^\\d+$/;\n    isValid = pattern.test(value) && isValid;\n  }\n\n  if (rules.isFullName) {\n    const pattern = /^[a-zA-Z]{2,}(?: [a-zA-Z]+){1,}$/;\n    isValid = pattern.test(value) && isValid;\n  }\n\n  return isValid;\n};\n","export default __webpack_public_path__ + \"static/media/wings-logo.a002e857.svg\";","import React from 'react';\n\ninterface ActivismProps {\n  color?: string;\n}\n\nexport const Activism = ({ color }: ActivismProps): JSX.Element => {\n  return (\n    <svg width=\"41\" height=\"47\" viewBox=\"0 0 41 47\" fill=\"none\">\n      <path\n        d=\"M37.6352 26.2539C37.2768 26.2539 36.9345 26.3235 36.6202 26.4486C36.3017 25.2799 35.2315 24.418 33.9633 24.418C33.2585 24.418 32.615 24.6844 32.1274 25.1214C31.6398 24.6844 30.9963 24.418 30.2915 24.418C29.5866 24.418 28.9431 24.6844 28.4555 25.1214C28.1906 24.8839 27.8795 24.6971 27.5376 24.5759V18.3597C29.8458 16.6285 31.2094 13.919 31.2094 11.0156C31.2094 9.8879 31.2094 6.28542 31.2094 4.58984C31.2094 3.07134 29.974 1.83594 28.4555 1.83594C28.0971 1.83594 27.7548 1.90552 27.4405 2.03064C27.122 0.861973 26.0518 0 24.7836 0C24.0788 0 23.4353 0.266395 22.9477 0.703439C22.4601 0.266395 21.8166 0 21.1118 0C20.407 0 19.7635 0.266395 19.2758 0.703439C18.7882 0.266395 18.1447 0 17.4399 0C15.9214 0 14.686 1.2354 14.686 2.75391V4.59168C13.5425 5.45246 12.8501 6.81326 12.8501 8.26172V11.0156C12.8501 13.919 14.2137 16.6285 16.5219 18.3597V20.904C16.2346 20.8021 15.9258 20.7461 15.604 20.7461C15.2456 20.7461 14.9033 20.8157 14.589 20.9408C14.2704 19.7721 13.2003 18.9102 11.9321 18.9102C11.2273 18.9102 10.5838 19.1765 10.0961 19.6136C9.60852 19.1765 8.96503 18.9102 8.26021 18.9102C7.55539 18.9102 6.9119 19.1765 6.42427 19.6136C5.93665 19.1765 5.29315 18.9102 4.58834 18.9102C3.06983 18.9102 1.83443 20.1456 1.83443 21.6641V23.5007C0.84844 24.2436 0.187594 25.3672 0.034018 26.5994C-0.028771 27.1025 0.328227 27.5612 0.831366 27.624C1.33359 27.6864 1.79312 27.3297 1.85582 26.8266C2.02381 25.4788 3.17696 24.418 4.58834 24.417H9.02084C8.64199 25.4866 7.62103 26.2539 6.42427 26.2539H4.58834C4.08143 26.2539 3.67037 26.6649 3.67037 27.1719C3.67037 27.6789 4.08143 28.0898 4.58834 28.0898C7.11918 28.0898 9.17818 30.1488 9.17818 32.6797C9.17818 33.1867 9.58925 33.5977 10.0961 33.5977C10.6031 33.5977 11.0141 33.1867 11.0141 32.6797C11.0141 30.6093 10.0289 28.7657 8.50375 27.5897C8.90903 27.3828 9.27952 27.1176 9.60439 26.805C10.0929 27.5762 10.9534 28.0898 11.9321 28.0898C12.6369 28.0898 13.2804 27.8235 13.768 27.3864C14.2556 27.8235 14.8991 28.0898 15.604 28.0898C15.9258 28.0898 16.2346 28.0338 16.5219 27.932V29.9258C16.5219 32.3821 15.3016 34.6652 13.2574 36.0329C13.0029 36.2033 12.8501 36.4895 12.8501 36.7959V45.1641H5.5063V36.7959C5.5063 36.4895 5.35346 36.2033 5.09891 36.0329C4.34636 35.5293 3.69956 34.8988 3.17659 34.1589C2.88394 33.7449 2.31113 33.6464 1.89713 33.9391C1.48303 34.2318 1.38472 34.8046 1.67727 35.2186C2.23384 36.0061 2.90295 36.6944 3.67037 37.27V46.082C3.67037 46.5889 4.08143 47 4.58834 47H13.768C14.2749 47 14.686 46.5889 14.686 46.082V37.2699C15.39 36.7419 16.0056 36.1224 16.5219 35.4346V46.082C16.5219 46.5889 16.933 47 17.4399 47H35.7993C36.3062 47 36.7172 46.5889 36.7172 46.082V42.7777C39.0255 41.0464 40.3891 38.3369 40.3891 35.4336C40.3891 34.3059 40.3891 30.7034 40.3891 29.0078C40.3891 27.4893 39.1537 26.2539 37.6352 26.2539ZM37.6352 28.0898C38.1414 28.0898 38.5532 28.5016 38.5532 29.0078V30.8438C38.5532 31.3499 38.1414 31.7617 37.6352 31.7617C37.129 31.7617 36.7172 31.3499 36.7172 30.8438V29.0078C36.7172 28.5016 37.129 28.0898 37.6352 28.0898ZM33.9633 26.2539C34.4695 26.2539 34.8813 26.6657 34.8813 27.1719V30.8438C34.8813 31.3499 34.4695 31.7617 33.9633 31.7617C33.4572 31.7617 33.0454 31.3499 33.0454 30.8438V27.1719C33.0454 26.6657 33.4572 26.2539 33.9633 26.2539ZM30.2915 26.2539C30.7976 26.2539 31.2094 26.6657 31.2094 27.1719V28.0898H29.3735V27.1719C29.3735 26.6657 29.7853 26.2539 30.2915 26.2539ZM26.6196 28.0898C26.3102 28.0898 26.0027 28.1218 25.7016 28.1832V27.1719C25.7016 26.6657 26.1134 26.2539 26.6196 26.2539C27.1258 26.2539 27.5376 26.6657 27.5376 27.1719V28.0898H26.6196ZM28.4555 3.67188C28.9617 3.67188 29.3735 4.08368 29.3735 4.58984V6.42578C29.3735 6.93195 28.9617 7.34375 28.4555 7.34375C27.9494 7.34375 27.5376 6.93195 27.5376 6.42578V4.58984C27.5376 4.08368 27.9494 3.67188 28.4555 3.67188ZM24.7836 1.83594C25.2898 1.83594 25.7016 2.24774 25.7016 2.75391V6.42578C25.7016 6.93195 25.2898 7.34375 24.7836 7.34375C24.2775 7.34375 23.8657 6.93195 23.8657 6.42578V2.75391C23.8657 2.24774 24.2775 1.83594 24.7836 1.83594ZM21.1118 1.83594C21.6179 1.83594 22.0297 2.24774 22.0297 2.75391V3.67188H20.1938V2.75391C20.1938 2.24774 20.6056 1.83594 21.1118 1.83594ZM17.4399 1.83594C17.9461 1.83594 18.3579 2.24774 18.3579 2.75391V3.67188H17.4399C17.1305 3.67188 16.823 3.70382 16.5219 3.76523V2.75391C16.5219 2.24774 16.9337 1.83594 17.4399 1.83594ZM3.67037 22.6754V21.6641C3.67037 21.1579 4.08217 20.7461 4.58834 20.7461C5.0945 20.7461 5.5063 21.1579 5.5063 21.6641V22.582H4.58834C4.27898 22.582 3.97146 22.614 3.67037 22.6754ZM7.34224 22.582V21.6641C7.34224 21.1579 7.75404 20.7461 8.26021 20.7461C8.76638 20.7461 9.17818 21.1579 9.17818 21.6641V22.582H7.34224ZM11.9321 26.2539C11.4259 26.2539 11.0141 25.8421 11.0141 25.3359V21.6641C11.0141 21.1579 11.4259 20.7461 11.9321 20.7461C12.4383 20.7461 12.8501 21.1579 12.8501 21.6641V25.3359C12.8501 25.8421 12.4383 26.2539 11.9321 26.2539ZM15.604 26.2539C15.0978 26.2539 14.686 25.8421 14.686 25.3359V23.5C14.686 22.9938 15.0978 22.582 15.604 22.582C16.1101 22.582 16.5219 22.9938 16.5219 23.5V25.3359C16.5219 25.8421 16.1101 26.2539 15.604 26.2539ZM18.3579 17.8857C18.3579 17.5794 18.205 17.2932 17.9505 17.1228C15.9063 15.755 14.686 13.4719 14.686 11.0156V8.26172C14.686 6.77801 15.884 5.50983 17.4399 5.50689H21.8724C21.4936 6.57642 20.4726 7.34375 19.2758 7.34375H17.4399C16.933 7.34375 16.5219 7.75472 16.5219 8.26172C16.5219 8.76871 16.933 9.17969 17.4399 9.17969C19.9707 9.17969 22.0297 11.2387 22.0297 13.7695C22.0297 14.2765 22.4408 14.6875 22.9477 14.6875C23.4546 14.6875 23.8657 14.2765 23.8657 13.7695C23.8657 11.6991 22.8804 9.8555 21.3553 8.67958C21.7606 8.47267 22.1311 8.20747 22.456 7.89481C22.9445 8.66608 23.805 9.17969 24.7836 9.17969C25.4885 9.17969 26.132 8.91329 26.6196 8.47625C27.1072 8.91329 27.7507 9.17969 28.4555 9.17969C28.7774 9.17969 29.0862 9.12369 29.3735 9.0218V11.0156C29.3735 13.4719 28.1531 15.755 26.109 17.1228C25.8545 17.2932 25.7016 17.5794 25.7016 17.8857V24.5759C24.6332 24.9548 23.8657 25.9751 23.8657 27.1719V29.0096C22.7222 29.8704 22.0297 31.2312 22.0297 32.6797V35.4336C22.0297 38.3369 23.3934 41.0464 25.7016 42.7777V45.1641H18.3579V17.8857ZM35.2887 41.5407C35.0341 41.7111 34.8813 41.9973 34.8813 42.3037V45.1641H27.5376V42.3037C27.5376 41.9973 27.3847 41.7111 27.1302 41.5407C25.086 40.173 23.8657 37.8899 23.8657 35.4336V32.6797C23.8657 31.196 25.0637 29.9278 26.6196 29.9249H31.0521C30.6732 30.9944 29.6523 31.7617 28.4555 31.7617H26.6196C26.1127 31.7617 25.7016 32.1727 25.7016 32.6797C25.7016 33.1867 26.1127 33.5977 26.6196 33.5977C29.1504 33.5977 31.2094 35.6567 31.2094 38.1875C31.2094 38.6945 31.6205 39.1055 32.1274 39.1055C32.6343 39.1055 33.0454 38.6945 33.0454 38.1875C33.0454 36.1171 32.0601 34.2735 30.535 33.0975C30.9403 32.8906 31.3108 32.6254 31.6356 32.3128C32.1242 33.0841 32.9847 33.5977 33.9633 33.5977C34.6682 33.5977 35.3116 33.3313 35.7993 32.8942C36.2869 33.3313 36.9304 33.5977 37.6352 33.5977C37.9571 33.5977 38.2659 33.5417 38.5532 33.4398V35.4336C38.5532 37.8899 37.3328 40.173 35.2887 41.5407Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M0.917969 31.7617C1.42495 31.7617 1.83594 31.3507 1.83594 30.8437C1.83594 30.3367 1.42495 29.9258 0.917969 29.9258C0.410989 29.9258 0 30.3367 0 30.8437C0 31.3507 0.410989 31.7617 0.917969 31.7617Z\"\n        fill={color ? color : '#571C56'}\n      />\n    </svg>\n  );\n};\n\nexport default Activism;\n","import React from 'react';\n\ninterface BeautyProps {\n  color?: string;\n}\n\nexport const Beauty = ({ color }: BeautyProps): JSX.Element => {\n  return (\n    <svg width=\"47\" height=\"48\" viewBox=\"0 0 47 48\" fill=\"none\">\n      <path\n        d=\"M42.7966 43.8686V27.4955L43.119 25.8831C43.9354 21.7958 44.3519 17.6386 44.3626 13.4705L46.7918 7.39768C47.0396 6.77161 47.0657 6.07965 46.866 5.43665C46.6663 4.79366 46.2527 4.2383 45.6939 3.86275L45.6381 3.82563C43.8702 2.64251 41.7907 2.01093 39.6634 2.01093C37.536 2.01093 35.4566 2.64251 33.6886 3.82563L33.633 3.86275C33.0741 4.23827 32.6605 4.79363 32.4608 5.43664C32.2611 6.07964 32.2872 6.77161 32.535 7.39768L34.9641 13.4706C34.9748 17.6387 35.3913 21.7958 36.2077 25.8831L36.5302 27.4956V43.8686C36.5302 44.6996 36.8603 45.4967 37.4479 46.0843C38.0356 46.6719 38.8326 47.0021 39.6636 47.0021C40.4947 47.0021 41.2917 46.6719 41.8793 46.0843C42.4669 45.4967 42.7971 44.6996 42.7971 43.8686H42.7966ZM36.2766 12.534L33.9893 6.81544C33.8737 6.52326 33.8614 6.20031 33.9547 5.90022C34.0479 5.60012 34.2409 5.34093 34.5017 5.16568L34.5573 5.12857C36.0682 4.11757 37.8452 3.57787 39.6631 3.57787C41.481 3.57787 43.258 4.11757 44.7688 5.12857L44.8245 5.16568C45.0854 5.34091 45.2785 5.60009 45.3717 5.90017C45.465 6.20026 45.4528 6.52322 45.3372 6.81544L43.0496 12.534H41.402L41.9979 9.55419C42.0188 9.45306 42.0194 9.34882 41.9998 9.24745C41.9802 9.14608 41.9407 9.04959 41.8837 8.96352C41.8267 8.87745 41.7532 8.8035 41.6675 8.74593C41.5818 8.68835 41.4856 8.64829 41.3843 8.62804C41.2831 8.60779 41.1788 8.60775 41.0776 8.62793C40.9763 8.64811 40.8801 8.68811 40.7943 8.74562C40.7086 8.80314 40.635 8.87703 40.5779 8.96306C40.5209 9.04909 40.4813 9.14556 40.4617 9.24691L39.8047 12.534H39.5224L38.8647 9.24691C38.845 9.14556 38.8055 9.04909 38.7484 8.96306C38.6913 8.87703 38.6178 8.80314 38.532 8.74562C38.4463 8.68811 38.35 8.64811 38.2488 8.62793C38.1475 8.60775 38.0433 8.60779 37.942 8.62804C37.8408 8.64829 37.7445 8.68835 37.6588 8.74593C37.5731 8.8035 37.4997 8.87745 37.4426 8.96352C37.3856 9.04959 37.3462 9.14608 37.3266 9.24745C37.307 9.34882 37.3076 9.45306 37.3284 9.55419L37.9246 12.534H36.2766ZM41.2299 43.8686C41.2299 44.2841 41.0648 44.6826 40.771 44.9764C40.4772 45.2703 40.0786 45.4353 39.6631 45.4353C39.2476 45.4353 38.8491 45.2703 38.5553 44.9764C38.2615 44.6826 38.0964 44.2841 38.0964 43.8686V28.2013H41.2299V43.8686ZM41.3714 26.6346H37.9552L37.7435 25.5759C36.9883 21.7962 36.5835 17.9548 36.5342 14.1007H42.7913C42.7717 15.6683 42.6925 17.235 42.5535 18.8009H40.4465C40.2387 18.8009 40.0395 18.8835 39.8926 19.0304C39.7457 19.1773 39.6631 19.3765 39.6631 19.5843C39.6631 19.7921 39.7457 19.9913 39.8926 20.1382C40.0395 20.2851 40.2387 20.3677 40.4465 20.3677H42.3961C42.1978 22.1155 41.9267 23.8516 41.5827 25.5759L41.3714 26.6346Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M31.2743 23.6997L29.7377 23.1878C29.4728 23.0995 29.1906 23.0754 28.9146 23.1175C28.6385 23.1596 28.3764 23.2667 28.1498 23.43C27.9233 23.5932 27.7388 23.808 27.6115 24.0566C27.4842 24.3051 27.4178 24.5804 27.4178 24.8597V32.9015C27.21 32.9015 27.0108 32.984 26.8638 33.1309C26.7169 33.2778 26.6344 33.4771 26.6344 33.6849V46.2187C26.6344 46.4265 26.7169 46.6257 26.8638 46.7726C27.0108 46.9195 27.21 47.0021 27.4178 47.0021H33.6847C33.8924 47.0021 34.0917 46.9195 34.2386 46.7726C34.3855 46.6257 34.468 46.4265 34.468 46.2187V33.6849C34.468 33.4771 34.3855 33.2778 34.2386 33.1309C34.0917 32.984 33.8924 32.9015 33.6847 32.9015V27.0441C33.6853 26.304 33.4528 25.5826 33.0201 24.9822C32.5874 24.3819 31.9765 23.9331 31.2743 23.6997ZM28.9845 24.8597C28.9845 24.8286 28.9918 24.798 29.0059 24.7703C29.02 24.7427 29.0406 24.7188 29.0657 24.7006C29.0909 24.6824 29.1201 24.6705 29.1508 24.6658C29.1815 24.6611 29.2129 24.6638 29.2423 24.6736L30.7788 25.1857C31.169 25.3154 31.5084 25.5648 31.7488 25.8984C31.9892 26.232 32.1184 26.6329 32.118 27.0441V32.9015H28.9845V24.8597ZM32.9013 45.4353H28.2011V37.6017H32.9013V45.4353ZM32.9013 36.035H28.2011V34.4682H32.9013V36.035Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M0 39.9518V40.3435C0.00199562 42.1088 0.704166 43.8013 1.95246 45.0496C3.20076 46.2979 4.89324 47.0001 6.6586 47.0021H18.4091C20.1744 47.0001 21.8669 46.2979 23.1152 45.0496C24.3635 43.8013 25.0657 42.1088 25.0677 40.3435V39.9518C25.0677 39.744 24.9851 39.5448 24.8382 39.3979C24.6913 39.251 24.4921 39.1684 24.2843 39.1684H22.4434C23.236 37.4968 23.5929 35.6518 23.4808 33.8052C23.3687 31.9586 22.7913 30.1703 21.8023 28.6068C20.8133 27.0434 19.4449 25.7555 17.8243 24.863C16.2038 23.9706 14.3839 23.5026 12.5338 23.5026C10.6838 23.5026 8.86386 23.9706 7.24333 24.863C5.6228 25.7555 4.25437 27.0434 3.26537 28.6068C2.27638 30.1703 1.69897 31.9586 1.58688 33.8052C1.47479 35.6518 1.83165 37.4968 2.62427 39.1684H0.783365C0.575603 39.1684 0.376352 39.251 0.229442 39.3979C0.0825328 39.5448 0 39.744 0 39.9518ZM12.5338 25.0679C14.1839 25.068 15.8049 25.5024 17.2338 26.3275C18.6628 27.1526 19.8494 28.3392 20.6745 29.7682C21.4996 31.1972 21.934 32.8181 21.9342 34.4682C21.9344 36.1183 21.5002 37.7393 20.6754 39.1684H18.8034C19.6763 38.0044 20.2079 36.6202 20.3385 35.1711C20.4691 33.722 20.1935 32.2651 19.5428 30.9638C18.8921 29.6624 17.8918 28.5679 16.6541 27.803C15.4164 27.0381 13.9902 26.633 12.5352 26.633C11.0802 26.633 9.65391 27.0381 8.4162 27.803C7.1785 28.5679 6.17824 29.6624 5.52751 30.9638C4.87677 32.2651 4.60126 33.722 4.73186 35.1711C4.86246 36.6202 5.394 38.0044 6.26692 39.1684H4.39223C3.56743 37.7393 3.1333 36.1183 3.13346 34.4682C3.13362 32.8181 3.56807 31.1972 4.39315 29.7682C5.21823 28.3392 6.40488 27.1526 7.83385 26.3275C9.26282 25.5024 10.8838 25.068 12.5338 25.0679ZM13.6348 28.3001C14.2824 28.415 14.9077 28.6319 15.4873 28.9428L7.8644 38.6447C7.48877 38.2249 7.17146 37.7564 6.92103 37.2518L13.6348 28.3001ZM6.34016 35.415C6.21294 34.5913 6.2516 33.7504 6.45387 32.9418C6.65614 32.1333 7.01794 31.3732 7.51802 30.7064C8.01811 30.0396 8.6464 29.4794 9.36599 29.0588C10.0856 28.6382 10.882 28.3656 11.7084 28.257L6.34016 35.415ZM16.7662 29.8511C17.4078 30.4396 17.9203 31.1549 18.2713 31.9517C18.2713 31.9517 12.6423 39.1245 12.6196 39.1684H9.44542L16.7662 29.8511ZM10.1837 40.7351H14.8839C15.0917 40.7351 15.2909 40.8177 15.4379 40.9646C15.5848 41.1115 15.6673 41.3108 15.6673 41.5185C15.6673 41.7263 15.5848 41.9255 15.4379 42.0724C15.2909 42.2193 15.0917 42.3019 14.8839 42.3019H10.1837C9.97598 42.3019 9.77673 42.2193 9.62982 42.0724C9.48291 41.9255 9.40038 41.7263 9.40038 41.5185C9.40038 41.3108 9.48291 41.1115 9.62982 40.9646C9.77673 40.8177 9.97598 40.7351 10.1837 40.7351ZM14.5933 39.1684L18.7702 33.8523C18.7898 34.0551 18.8008 34.2603 18.8008 34.4682C18.8024 35.3578 18.6138 36.2374 18.2475 37.0481C17.8812 37.8588 17.3457 38.5817 16.6771 39.1684H14.5933ZM7.96839 40.7351C7.84289 41.0896 7.80429 41.469 7.85585 41.8414C7.9074 42.2139 8.0476 42.5685 8.26467 42.8755C8.48173 43.1826 8.76932 43.433 9.10326 43.6058C9.4372 43.7786 9.80774 43.8687 10.1837 43.8686H14.8839C15.2599 43.8687 15.6304 43.7787 15.9643 43.6059C16.2982 43.4332 16.5857 43.1828 16.8028 42.8759C17.0199 42.5689 17.1601 42.2144 17.2118 41.842C17.2634 41.4696 17.2249 41.0903 17.0995 40.7358L17.1027 40.7351H23.4861C23.3859 42.0135 22.8077 43.2071 21.8668 44.0782C20.9259 44.9492 19.6913 45.4338 18.4091 45.4353H6.6586C5.37638 45.4338 4.1418 44.9492 3.20089 44.0782C2.25998 43.2071 1.68181 42.0135 1.58161 40.7351H7.96839Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M22.283 11.619L23.5385 12.456C24.1423 12.859 24.6306 13.4124 24.9555 14.0616L25.1504 14.4515C25.2155 14.5816 25.3155 14.691 25.4392 14.7675C25.563 14.8439 25.7056 14.8844 25.851 14.8844C25.9965 14.8844 26.1391 14.8439 26.2628 14.7675C26.3866 14.691 26.4866 14.5816 26.5517 14.4515L26.7466 14.0616C27.0714 13.4122 27.5598 12.8588 28.1636 12.4557L29.4191 11.6187C29.5411 11.5374 29.6378 11.4234 29.6983 11.2898C29.7587 11.1562 29.7804 11.0083 29.761 10.863C29.7415 10.7176 29.6816 10.5806 29.5882 10.4676C29.4947 10.3546 29.3714 10.2701 29.2322 10.2238C28.6187 10.0176 28.0612 9.67217 27.6035 9.21449C27.1459 8.75681 26.8004 8.19934 26.5943 7.58579C26.5423 7.42977 26.4425 7.29407 26.3092 7.1979C26.1758 7.10174 26.0155 7.04999 25.851 7.04999C25.6866 7.04999 25.5263 7.10174 25.3929 7.1979C25.2595 7.29407 25.1598 7.42977 25.1078 7.58579C24.9017 8.19934 24.5562 8.75681 24.0985 9.21449C23.6409 9.67217 23.0834 10.0176 22.4698 10.2238C22.3307 10.2701 22.2074 10.3546 22.1139 10.4676C22.0205 10.5806 21.9606 10.7176 21.9411 10.863C21.9216 11.0083 21.9434 11.1562 22.0038 11.2898C22.0643 11.4234 22.161 11.5374 22.283 11.6187V11.619ZM25.851 9.55399C26.2723 10.1541 26.8037 10.6689 27.4169 11.0709L27.2946 11.1524C26.7365 11.5248 26.2479 11.9919 25.851 12.5328C25.4542 11.9918 24.9656 11.5245 24.4075 11.1522L24.2852 11.0706C24.8984 10.6687 25.4297 10.154 25.851 9.55399Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M20.6152 14.9243C20.0017 14.7181 19.4442 14.3727 18.9865 13.915C18.5288 13.4573 18.1834 12.8998 17.9772 12.2863C17.9253 12.1303 17.8255 11.9946 17.6921 11.8984C17.5587 11.8022 17.3985 11.7505 17.234 11.7505C17.0696 11.7505 16.9093 11.8022 16.7759 11.8984C16.6425 11.9946 16.5428 12.1303 16.4908 12.2863C16.2846 12.8998 15.9392 13.4573 15.4815 13.915C15.0238 14.3727 14.4664 14.7181 13.8528 14.9243C13.7137 14.9706 13.5904 15.0551 13.4969 15.1681C13.4034 15.2811 13.3435 15.4181 13.3241 15.5634C13.3046 15.7088 13.3263 15.8567 13.3868 15.9903C13.4472 16.1239 13.544 16.2379 13.666 16.3192L14.9214 17.1562C15.5252 17.5592 16.0136 18.1125 16.3384 18.7618L16.5334 19.1517C16.5985 19.2818 16.6985 19.3912 16.8222 19.4677C16.946 19.5441 17.0885 19.5846 17.234 19.5846C17.3795 19.5846 17.5221 19.5441 17.6458 19.4677C17.7696 19.3912 17.8696 19.2818 17.9346 19.1517L18.1296 18.7618C18.4544 18.1124 18.9428 17.559 19.5466 17.1559L20.802 16.3189C20.9241 16.2376 21.0208 16.1236 21.0812 15.99C21.1417 15.8564 21.1634 15.7085 21.1439 15.5631C21.1245 15.4178 21.0646 15.2808 20.9711 15.1678C20.8777 15.0548 20.7543 14.9703 20.6152 14.924V14.9243ZM18.6776 15.8526C18.1195 16.2249 17.6309 16.6921 17.234 17.233C16.8372 16.692 16.3486 16.2247 15.7905 15.8523L15.6682 15.7708C16.2814 15.3689 16.8127 14.8542 17.234 14.2542C17.6553 14.8543 18.1866 15.3691 18.7999 15.7711L18.6776 15.8526Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M22.6801 5.40539L23.9355 4.56846C24.0574 4.48709 24.1541 4.37314 24.2145 4.23956C24.2749 4.10599 24.2966 3.95814 24.2771 3.81285C24.2576 3.66755 24.1978 3.53063 24.1044 3.41766C24.011 3.30468 23.8877 3.22019 23.7487 3.17378C23.1351 2.96764 22.5776 2.62218 22.12 2.1645C21.6623 1.70682 21.3168 1.14935 21.1107 0.5358C21.0587 0.379785 20.959 0.24408 20.8256 0.147915C20.6922 0.0517492 20.5319 0 20.3675 0C20.203 0 20.0427 0.0517492 19.9094 0.147915C19.776 0.24408 19.6762 0.379785 19.6242 0.5358C19.4181 1.14935 19.0726 1.70682 18.615 2.1645C18.1573 2.62218 17.5998 2.96764 16.9863 3.17378C16.8471 3.22015 16.7238 3.30464 16.6303 3.41764C16.5369 3.53064 16.477 3.66761 16.4575 3.81297C16.4381 3.95832 16.4598 4.10622 16.5202 4.23983C16.5807 4.37345 16.6774 4.48741 16.7994 4.56876L18.0549 5.40539C18.6587 5.80848 19.1471 6.36197 19.4719 7.01129L19.6668 7.40121C19.7319 7.53131 19.8319 7.64072 19.9557 7.71719C20.0794 7.79366 20.222 7.83416 20.3675 7.83416C20.5129 7.83416 20.6555 7.79366 20.7793 7.71719C20.903 7.64072 21.003 7.53131 21.0681 7.40121L21.263 7.01129C21.5878 6.36197 22.0762 5.80848 22.6801 5.40539ZM20.3675 5.48255C19.9706 4.94154 19.4821 4.47424 18.9239 4.10187L18.8016 4.0203C19.4148 3.61839 19.9462 3.10375 20.3675 2.50371C20.7887 3.10386 21.3201 3.6186 21.9333 4.0206L21.811 4.10217C21.2529 4.47447 20.7643 4.94166 20.3675 5.48255Z\"\n        fill={color ? color : '#571C56'}\n      />\n    </svg>\n  );\n};\n\nexport default Beauty;\n","import React from 'react';\n\ninterface ContentProps {\n  color?: string;\n}\n\nexport const Content = ({ color }: ContentProps): JSX.Element => {\n  return (\n    <svg width=\"50\" height=\"50\" viewBox=\"0 0 50 50\" fill=\"none\">\n      <path\n        d=\"M47.6562 40.625H45.8188C46.6363 39.9671 47.2959 39.1343 47.7491 38.1879C48.2023 37.2415 48.4375 36.2056 48.4375 35.1562C48.4375 34.2558 48.1264 33.383 47.557 32.6854C46.9876 31.9879 46.1947 31.5084 45.3125 31.3281V19.5312C45.3113 18.4956 44.8994 17.5027 44.1671 16.7704C43.4348 16.0381 42.4419 15.6262 41.4062 15.625H39.0625V11.7188C39.0625 11.6162 39.0423 11.5146 39.003 11.4198C38.9638 11.325 38.9062 11.2389 38.8337 11.1663L29.4587 1.79131C29.3861 1.71876 29.3 1.66122 29.2052 1.62196C29.1104 1.5827 29.0088 1.5625 28.9062 1.5625H11.7188C11.5115 1.5625 11.3128 1.64481 11.1663 1.79132C11.0198 1.93784 10.9375 2.13655 10.9375 2.34375V15.625H8.59375C7.5581 15.6262 6.56521 16.0381 5.8329 16.7704C5.10059 17.5027 4.68866 18.4956 4.6875 19.5312V40.625H2.34375C2.13655 40.625 1.93784 40.7073 1.79132 40.8538C1.64481 41.0003 1.5625 41.1991 1.5625 41.4062C1.56459 43.2704 2.30606 45.0576 3.62422 46.3758C4.94238 47.6939 6.72959 48.4354 8.59375 48.4375H41.4062C42.3297 48.4377 43.2441 48.256 44.0973 47.9027C44.9504 47.5495 45.7257 47.0316 46.3786 46.3786C47.0316 45.7257 47.5495 44.9504 47.9027 44.0973C48.256 43.2441 48.4377 42.3297 48.4375 41.4062C48.4375 41.1991 48.3552 41.0003 48.2087 40.8538C48.0622 40.7073 47.8634 40.625 47.6562 40.625ZM35.1562 43.75H30.4688C29.0188 43.7484 27.6288 43.1717 26.6036 42.1464C25.5783 41.1212 25.0016 39.7312 25 38.2812V31.25H40.625V38.2812C40.6234 39.7312 40.0467 41.1212 39.0214 42.1464C37.9962 43.1717 36.6062 43.7484 35.1562 43.75ZM26.5625 24.8656C26.8133 24.9547 27.0776 25.0001 27.3438 25H32.0312C32.2384 25.0002 32.437 25.0826 32.5834 25.2291C32.7299 25.3755 32.8123 25.5741 32.8125 25.7812V26.5625H26.5625V24.8656ZM32.8125 23.5719C32.5617 23.4828 32.2974 23.4374 32.0312 23.4375H27.3438C27.1365 23.4375 26.9378 23.3552 26.7913 23.2087C26.6448 23.0622 26.5625 22.8635 26.5625 22.6562C26.5625 22.449 26.6448 22.2503 26.7913 22.1038C26.9378 21.9573 27.1365 21.875 27.3438 21.875H32.8125V23.5719ZM27.3438 20.3125C27.0776 20.3124 26.8133 20.3578 26.5625 20.4469V18.75H32.8125V20.3125H27.3438ZM34.375 18.75H36.7188C36.9259 18.75 37.1247 18.8323 37.2712 18.9788C37.4177 19.1253 37.5 19.324 37.5 19.5312C37.5 19.7385 37.4177 19.9372 37.2712 20.0837C37.1247 20.2302 36.9259 20.3125 36.7188 20.3125H34.375V18.75ZM29.6875 4.22988L36.3951 10.9375H29.6875V4.22988ZM39.0625 20.3125H39.8438C40.0509 20.3127 40.2495 20.3951 40.3959 20.5416C40.5424 20.688 40.6248 20.8866 40.625 21.0938V29.6875H39.0625V20.3125ZM42.1875 35.9375H43.6174C43.5003 36.2671 43.3111 36.5664 43.0638 36.8137C42.8165 37.061 42.5171 37.2501 42.1875 37.3672V35.9375ZM46.875 35.1562C46.8732 36.5397 46.3477 37.8711 45.4043 38.8829C44.4608 39.8946 43.1693 40.5117 41.7894 40.6101C41.9741 40.0869 42.0958 39.5435 42.1517 38.9914C43.0418 38.8184 43.8439 38.3411 44.4206 37.6413C44.9974 36.9416 45.3127 36.063 45.3125 35.1562C45.3125 34.9491 45.2302 34.7503 45.0837 34.6038C44.9372 34.4573 44.7384 34.375 44.5312 34.375H42.1875V32.8125H44.5312C44.8391 32.8124 45.1439 32.8729 45.4283 32.9907C45.7127 33.1084 45.9711 33.2811 46.1888 33.4987C46.4064 33.7164 46.5791 33.9748 46.6968 34.2592C46.8146 34.5436 46.8751 34.8484 46.875 35.1562ZM41.4062 17.1875C42.0276 17.1882 42.6233 17.4354 43.0627 17.8748C43.5021 18.3141 43.7493 18.9099 43.75 19.5312V31.25H42.1875V21.0938C42.1868 20.4724 41.9396 19.8766 41.5002 19.4373C41.0608 18.9979 40.4651 18.7507 39.8438 18.75H39.0625V17.1875H41.4062ZM12.5 3.125H28.125V11.7188C28.125 11.926 28.2073 12.1247 28.3538 12.2712C28.5003 12.4177 28.699 12.5 28.9062 12.5H37.5V17.3219C37.2492 17.2328 36.9849 17.1874 36.7188 17.1875H25.7812C25.574 17.1875 25.3753 17.2698 25.2288 17.4163C25.0823 17.5628 25 17.7615 25 17.9688V27.3438C25 27.551 25.0823 27.7497 25.2288 27.8962C25.3753 28.0427 25.574 28.125 25.7812 28.125H33.5938C33.8009 28.125 33.9997 28.0427 34.1462 27.8962C34.2927 27.7497 34.375 27.551 34.375 27.3438V21.875H36.7188C36.9849 21.8751 37.2492 21.8297 37.5 21.7406V29.6875H16.4062C16.199 29.6875 16.0003 29.7698 15.8538 29.9163C15.7073 30.0628 15.625 30.2615 15.625 30.4688C15.625 30.676 15.7073 30.8747 15.8538 31.0212C16.0003 31.1677 16.199 31.25 16.4062 31.25H23.4375V32.8125H16.4062C16.199 32.8125 16.0003 32.8948 15.8538 33.0413C15.7073 33.1878 15.625 33.3865 15.625 33.5938C15.625 33.8009 15.7073 33.9997 15.8538 34.1462C16.0003 34.2927 16.199 34.375 16.4062 34.375H23.4375V37.5H12.5V3.125ZM23.4819 39.0625C23.5411 39.5954 23.6614 40.1197 23.8406 40.625H9.375V21.0938C9.37523 20.8866 9.45762 20.688 9.60408 20.5416C9.75054 20.3951 9.94912 20.3127 10.1562 20.3125H10.9375V38.2812C10.9375 38.4884 11.0198 38.6872 11.1663 38.8337C11.3128 38.9802 11.5115 39.0625 11.7188 39.0625H23.4819ZM6.25 19.5312C6.25072 18.9099 6.49789 18.3141 6.93727 17.8748C7.37665 17.4354 7.97237 17.1882 8.59375 17.1875H10.9375V18.75H10.1562C9.53486 18.7507 8.93913 18.9979 8.49974 19.4372C8.06035 19.8766 7.8132 20.4724 7.8125 21.0938V40.625H6.25V19.5312ZM3.18066 42.1875H24.626C25.0218 42.7771 25.504 43.3038 26.0564 43.75H21.0938C20.8865 43.75 20.6878 43.8323 20.5413 43.9788C20.3948 44.1253 20.3125 44.3241 20.3125 44.5312C20.3116 45.3769 20.5867 46.1998 21.0959 46.875H8.59375C7.27911 46.8734 6.00892 46.3989 5.01512 45.5383C4.02131 44.6777 3.3702 43.4884 3.18066 42.1875ZM24.2188 46.875C23.7342 46.8744 23.2617 46.724 22.866 46.4442C22.4704 46.1645 22.171 45.7691 22.0089 45.3125H43.6161C43.454 45.7691 43.1546 46.1645 42.759 46.4442C42.3633 46.724 41.8908 46.8744 41.4062 46.875H24.2188ZM45.2734 45.2734C45.2605 45.2863 45.247 45.2983 45.2344 45.3111C45.2865 45.0544 45.3127 44.7932 45.3125 44.5312C45.3125 44.3241 45.2302 44.1253 45.0837 43.9788C44.9372 43.8323 44.7384 43.75 44.5312 43.75H39.5688C40.1213 43.3038 40.6035 42.7771 40.9993 42.1875H46.8196C46.6539 43.357 46.111 44.4405 45.2734 45.2734Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M24.2188 14.0625H19.5312C19.324 14.0625 19.1253 14.1448 18.9788 14.2913C18.8323 14.4378 18.75 14.6365 18.75 14.8438C18.75 15.051 18.8323 15.2497 18.9788 15.3962C19.1253 15.5427 19.324 15.625 19.5312 15.625H24.2188C24.426 15.625 24.6247 15.5427 24.7712 15.3962C24.9177 15.2497 25 15.051 25 14.8438C25 14.6365 24.9177 14.4378 24.7712 14.2913C24.6247 14.1448 24.426 14.0625 24.2188 14.0625Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M27.3438 15.625H33.5938C33.801 15.625 33.9997 15.5427 34.1462 15.3962C34.2927 15.2497 34.375 15.051 34.375 14.8438C34.375 14.6365 34.2927 14.4378 34.1462 14.2913C33.9997 14.1448 33.801 14.0625 33.5938 14.0625H27.3438C27.1365 14.0625 26.9378 14.1448 26.7913 14.2913C26.6448 14.4378 26.5625 14.6365 26.5625 14.8438C26.5625 15.051 26.6448 15.2497 26.7913 15.3962C26.9378 15.5427 27.1365 15.625 27.3438 15.625Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M16.4062 18.75H22.6562C22.8635 18.75 23.0622 18.6677 23.2087 18.5212C23.3552 18.3747 23.4375 18.176 23.4375 17.9688C23.4375 17.7615 23.3552 17.5628 23.2087 17.4163C23.0622 17.2698 22.8635 17.1875 22.6562 17.1875H16.4062C16.199 17.1875 16.0003 17.2698 15.8538 17.4163C15.7073 17.5628 15.625 17.7615 15.625 17.9688C15.625 18.176 15.7073 18.3747 15.8538 18.5212C16.0003 18.6677 16.199 18.75 16.4062 18.75Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M16.4062 21.875H22.6562C22.8635 21.875 23.0622 21.7927 23.2087 21.6462C23.3552 21.4997 23.4375 21.301 23.4375 21.0938C23.4375 20.8865 23.3552 20.6878 23.2087 20.5413C23.0622 20.3948 22.8635 20.3125 22.6562 20.3125H16.4062C16.199 20.3125 16.0003 20.3948 15.8538 20.5413C15.7073 20.6878 15.625 20.8865 15.625 21.0938C15.625 21.301 15.7073 21.4997 15.8538 21.6462C16.0003 21.7927 16.199 21.875 16.4062 21.875Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M16.4062 12.5H25.7812C25.9885 12.5 26.1872 12.4177 26.3337 12.2712C26.4802 12.1247 26.5625 11.926 26.5625 11.7188V5.46875C26.5625 5.26155 26.4802 5.06284 26.3337 4.91632C26.1872 4.76981 25.9885 4.6875 25.7812 4.6875H16.4062C16.199 4.6875 16.0003 4.76981 15.8538 4.91632C15.7073 5.06284 15.625 5.26155 15.625 5.46875V11.7188C15.625 11.926 15.7073 12.1247 15.8538 12.2712C16.0003 12.4177 16.199 12.5 16.4062 12.5ZM17.1875 6.25H25V10.9375H17.1875V6.25Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M16.4062 25H22.6562C22.8635 25 23.0622 24.9177 23.2087 24.7712C23.3552 24.6247 23.4375 24.426 23.4375 24.2188C23.4375 24.0115 23.3552 23.8128 23.2087 23.6663C23.0622 23.5198 22.8635 23.4375 22.6562 23.4375H16.4062C16.199 23.4375 16.0003 23.5198 15.8538 23.6663C15.7073 23.8128 15.625 24.0115 15.625 24.2188C15.625 24.426 15.7073 24.6247 15.8538 24.7712C16.0003 24.9177 16.199 25 16.4062 25Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M16.4062 28.125H22.6562C22.8635 28.125 23.0622 28.0427 23.2087 27.8962C23.3552 27.7497 23.4375 27.551 23.4375 27.3438C23.4375 27.1365 23.3552 26.9378 23.2087 26.7913C23.0622 26.6448 22.8635 26.5625 22.6562 26.5625H16.4062C16.199 26.5625 16.0003 26.6448 15.8538 26.7913C15.7073 26.9378 15.625 27.1365 15.625 27.3438C15.625 27.551 15.7073 27.7497 15.8538 27.8962C16.0003 28.0427 16.199 28.125 16.4062 28.125Z\"\n        fill={color ? color : '#571C56'}\n      />\n    </svg>\n  );\n};\n\nexport default Content;\n","import React from 'react';\n\ninterface MarketingProps {\n  color?: string;\n}\n\nexport const Marketing = ({ color }: MarketingProps): JSX.Element => {\n  return (\n    <svg width=\"50\" height=\"50\" viewBox=\"0 0 50 50\" fill=\"none\">\n      <path\n        d=\"M24.5479 42.2646C24.3663 42.0829 24.1143 41.9783 23.8575 41.9783C23.6006 41.9783 23.3487 42.0828 23.1671 42.2646C22.9854 42.4461 22.8809 42.6981 22.8809 42.9549C22.8809 43.2128 22.9854 43.4637 23.1671 43.6453C23.3487 43.8279 23.6006 43.9315 23.8575 43.9315C24.1143 43.9315 24.3663 43.8279 24.5479 43.6453C24.7296 43.4637 24.834 43.2118 24.834 42.9549C24.834 42.6981 24.7295 42.4461 24.5479 42.2646Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M29.1975 33.2557V26.07C29.1975 25.7456 29.0364 25.4422 28.7675 25.2607C28.4987 25.0792 28.1572 25.043 27.8561 25.1641L11.0287 31.9412H5.60877C2.5162 31.9412 9.15527e-05 34.4573 9.15527e-05 37.55C9.15527e-05 40.6428 2.5162 43.1589 5.60897 43.1589H6.25437V49.0233C6.25437 49.5626 6.69158 49.9999 7.23093 49.9999H11.2176C11.757 49.9999 12.1942 49.5626 12.1942 49.0233V43.63L27.8566 49.9294C27.9741 49.9767 28.0978 50 28.2208 50C28.413 50 28.6038 49.9433 28.7677 49.8326C29.0365 49.6511 29.1975 49.3478 29.1975 49.0234V41.8378C31.1559 41.3922 32.6225 39.6381 32.6225 37.5468C32.6225 35.4555 31.1559 33.7013 29.1975 33.2557ZM10.241 48.0468H8.20749V43.1588H10.2411V48.0468H10.241ZM10.2412 41.2057H5.60897C3.59315 41.2057 1.95321 39.5657 1.95321 37.55C1.95321 35.5342 3.59315 33.8943 5.60897 33.8943H10.2416L10.2412 41.2057ZM27.2445 47.5779H27.2444L12.1947 41.5249V33.5771L22.8809 29.2734V38.9648C22.8809 39.504 23.3181 39.9413 23.8575 39.9413C24.3968 39.9413 24.834 39.504 24.834 38.9648V28.4868L27.2445 27.516V47.5779ZM29.1975 39.7913V35.3021C30.0628 35.68 30.6694 36.5437 30.6694 37.5467C30.6694 38.5497 30.0629 39.4134 29.1975 39.7913Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M41.9387 36.5991H36.4096C35.8703 36.5991 35.433 37.0364 35.433 37.5756C35.433 38.1149 35.8703 38.5522 36.4096 38.5522H41.9387C42.4781 38.5522 42.9153 38.1149 42.9153 37.5756C42.9153 37.0364 42.4781 36.5991 41.9387 36.5991Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M37.4042 29.4431C37.0229 29.0619 36.4045 29.0619 36.0231 29.4431L34.1158 31.3503C33.7345 31.7317 33.7345 32.35 34.1158 32.7315C34.3067 32.9221 34.5566 33.0175 34.8065 33.0175C35.0564 33.0175 35.3064 32.9221 35.497 32.7315L37.4042 30.8243C37.7856 30.4429 37.7856 29.8245 37.4042 29.4431Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M37.4759 44.2359L35.5049 42.2648C35.1236 41.8835 34.5052 41.8835 34.1238 42.2648C33.7424 42.6461 33.7424 43.2645 34.1238 43.6459L36.0949 45.617C36.2856 45.8076 36.5355 45.9031 36.7854 45.9031C37.0353 45.9031 37.2853 45.8076 37.4759 45.617C37.8573 45.2357 37.8573 44.6173 37.4759 44.2359Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M46.0938 0H27.9297C25.7758 0 24.0235 1.75234 24.0235 3.90624V4.29687H7.61727C6.32489 4.29687 5.27353 5.34833 5.27353 6.64061V22.0703C5.27353 23.3626 6.32489 24.414 7.61727 24.414H8.62635V27.4088C8.62635 27.8039 8.86434 28.1599 9.22919 28.3111C9.34999 28.3611 9.47684 28.3854 9.60272 28.3854C9.85682 28.3854 10.1066 28.2862 10.2934 28.0994L13.9788 24.414H33.377C34.6694 24.414 35.7207 23.3626 35.7207 22.0703V19.1406H46.0938C48.2477 19.1406 50 17.3882 50 15.2343V3.90624C49.9999 1.75234 48.2477 0 46.0938 0ZM33.7676 22.0703C33.7676 22.2857 33.5924 22.4609 33.377 22.4609H13.5743C13.3153 22.4609 13.0669 22.5638 12.8838 22.7469L10.5796 25.0512V23.4375C10.5796 22.8982 10.1424 22.4609 9.60301 22.4609H7.61727C7.40185 22.4609 7.22665 22.2857 7.22665 22.0703V6.64061C7.22665 6.42518 7.40185 6.24999 7.61727 6.24999H24.0235V15.2343C24.0235 17.3882 25.7758 19.1406 27.9297 19.1406H33.7676V22.0703ZM48.0469 15.2343C48.0469 16.3113 47.1707 17.1875 46.0938 17.1875H27.9297C26.8528 17.1875 25.9766 16.3113 25.9766 15.2343V3.90624C25.9766 2.82929 26.8528 1.95312 27.9297 1.95312H46.0938C47.1707 1.95312 48.0469 2.82929 48.0469 3.90624V15.2343Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M40.9351 8.72459L34.2515 4.86581C33.9493 4.6913 33.5771 4.6913 33.2749 4.86581C32.9728 5.04022 32.7867 5.36268 32.7867 5.71151V13.429C32.7867 13.7778 32.9728 14.1003 33.2749 14.2747C33.426 14.362 33.5946 14.4055 33.7632 14.4055C33.9319 14.4055 34.1004 14.362 34.2515 14.2747L40.9351 10.4159C41.2372 10.2415 41.4234 9.91902 41.4234 9.57019C41.4234 9.22137 41.2373 8.899 40.9351 8.72459ZM34.7398 11.7376V7.40301L38.4937 9.57029L34.7398 11.7376Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M20.9484 10.2539H11.1828C10.6434 10.2539 10.2062 10.6912 10.2062 11.2305C10.2062 11.7697 10.6434 12.207 11.1828 12.207H20.9484C21.4878 12.207 21.925 11.7697 21.925 11.2305C21.925 10.6912 21.4878 10.2539 20.9484 10.2539Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M21.6387 16.0088C21.4571 15.827 21.2051 15.7226 20.9483 15.7226C20.6915 15.7226 20.4395 15.827 20.2579 16.0088C20.0762 16.1904 19.9717 16.4424 19.9717 16.6992C19.9717 16.956 20.0762 17.208 20.2579 17.3895C20.4395 17.5712 20.6915 17.6757 20.9483 17.6757C21.2061 17.6757 21.4571 17.5713 21.6387 17.3895C21.8204 17.208 21.9249 16.956 21.9249 16.6992C21.9249 16.4424 21.8204 16.1904 21.6387 16.0088Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M17.2852 15.7226H11.1828C10.6434 15.7226 10.2062 16.1599 10.2062 16.6992C10.2062 17.2384 10.6434 17.6757 11.1828 17.6757H17.2852C17.8246 17.6757 18.2618 17.2384 18.2618 16.6992C18.2618 16.1599 17.8246 15.7226 17.2852 15.7226Z\"\n        fill={color ? color : '#571C56'}\n      />\n    </svg>\n  );\n};\n\nexport default Marketing;\n","import React from 'react';\n\ninterface EntrepreneurshipProps {\n  color?: string;\n}\n\nexport const Entrepreneurship = ({ color }: EntrepreneurshipProps): JSX.Element => {\n  return (\n    <svg width=\"50\" height=\"50\" viewBox=\"0 0 50 50\" fill=\"none\">\n      <g clipPath=\"url(#clip0)\">\n        <path\n          d=\"M12.8167 20.324C13.2212 20.324 13.5491 19.9961 13.5491 19.5916V18.3221C13.5491 17.9176 13.2212 17.5896 12.8167 17.5896C12.4122 17.5896 12.0843 17.9176 12.0843 18.3221V19.5916C12.0843 19.9961 12.4122 20.324 12.8167 20.324Z\"\n          fill={color ? color : '#571C56'}\n        />\n        <path\n          d=\"M25.0138 20.324C25.4183 20.324 25.7462 19.9961 25.7462 19.5916V18.3221C25.7462 17.9176 25.4183 17.5896 25.0138 17.5896C24.6093 17.5896 24.2814 17.9176 24.2814 18.3221V19.5916C24.2814 19.9961 24.6093 20.324 25.0138 20.324Z\"\n          fill={color ? color : '#571C56'}\n        />\n        <path\n          d=\"M21.0752 19.9403C21.341 19.6353 21.3092 19.1727 21.0043 18.9069C20.6994 18.6411 20.2367 18.6728 19.9709 18.9778C19.4115 19.6195 18.4182 19.6188 17.8595 18.9778C17.5936 18.6727 17.131 18.6411 16.8261 18.9069C16.5211 19.1727 16.4893 19.6353 16.7552 19.9403C17.8983 21.252 19.9333 21.2506 21.0752 19.9403Z\"\n          fill={color ? color : '#571C56'}\n        />\n        <path\n          d=\"M2.87383 47.4777H47.1263C48.7109 47.4777 50.0001 46.1886 50.0001 44.6039V41.7089C50.0001 40.1242 48.7109 38.8351 47.1263 38.8351H45.9627C46.0616 38.6635 46.146 38.4811 46.21 38.2874L49.4663 28.4088C49.8059 27.3788 49.636 26.2842 49.0004 25.4056C48.3648 24.5269 47.3784 24.0229 46.2939 24.0229C45.0449 24.0229 35.9411 24.0229 34.4634 24.0229C32.7119 24.0229 31.1668 25.1405 30.6185 26.8039L28.1012 34.4405H25.9439C25.3442 32.713 24.4357 31.1449 23.2342 29.7629C27.0657 27.5252 29.6831 23.3873 29.6831 18.5461C29.6831 16.08 28.9882 13.6898 27.6747 11.617V6.86582C27.6747 4.4708 25.7262 2.52226 23.3312 2.52226H16.7161C13.7348 2.52226 10.8226 3.35117 8.29434 4.91933C7.95059 5.13261 7.84473 5.58408 8.05801 5.92783C8.27129 6.27158 8.72285 6.37734 9.0665 6.16416C11.3627 4.73994 14.0079 3.98711 16.7162 3.98711H23.3313C24.9186 3.98711 26.21 5.27851 26.21 6.86582V11.0964C9.05938 11.0985 9.89268 11.09 9.60127 11.1051C7.59082 11.2076 5.7291 12.3235 4.70713 14.0832C4.07588 14.0496 3.38428 14.1599 2.754 14.4238C3.49375 11.9359 4.90273 9.65634 6.82783 7.87148C7.12451 7.59648 7.14199 7.133 6.86699 6.83642C6.59199 6.53974 6.12852 6.52216 5.83193 6.79726C3.24727 9.19365 1.50879 12.402 0.921094 15.8494C0.35166 16.5994 0.0128906 17.5338 0.0128906 18.546C0.0128906 21.0206 2.03896 23.0462 4.54189 23.0136C5.42314 25.4099 6.99229 27.477 9.01084 28.9727C7.97871 29.9968 7.11406 31.1589 6.43467 32.4384C5.4082 34.3715 4.8415 36.5206 4.74287 38.8351H2.87383C1.28916 38.8351 0 40.1242 0 41.7089V44.6039C0 46.1885 1.28916 47.4777 2.87383 47.4777ZM28.631 35.9054C28.9471 35.9054 29.2275 35.7025 29.3266 35.4022L32.0098 27.2625C32.3597 26.201 33.3457 25.4878 34.4634 25.4878H35.6795L34.2913 29.699C34.1646 30.0832 34.3734 30.4973 34.7576 30.6239C35.1417 30.7504 35.5559 30.5419 35.6825 30.1576L37.2219 25.4878H46.2938C46.9027 25.4878 47.4565 25.7707 47.8134 26.2641C48.1702 26.7574 48.2655 27.372 48.0749 27.9502L44.8186 37.8287C44.6201 38.4307 44.061 38.8351 43.4273 38.8351H32.758C33.0757 38.2834 33.049 37.9996 34.7687 32.9302C34.8953 32.546 34.6865 32.1319 34.3023 32.0053C33.9183 31.8788 33.5041 32.0873 33.3774 32.4716L31.6115 37.8288C31.4131 38.4308 30.854 38.8352 30.2203 38.8352H24.0913C23.2641 38.8352 22.5978 38.1518 22.6274 37.3163C22.6551 36.5384 23.3354 35.9055 24.1439 35.9055C25.5377 35.9054 27.3286 35.9054 28.631 35.9054ZM1.47764 18.546C1.47764 17.0246 2.6165 15.7575 4.09639 15.5678C3.66338 17.2222 3.60654 19.454 4.09463 21.525C2.62041 21.3347 1.47764 20.0713 1.47764 18.546ZM5.46895 16.1265C5.90684 14.0791 7.75977 12.5612 9.90869 12.5612H26.5396C27.6391 14.3614 28.2183 16.4222 28.2183 18.546C28.2183 23.0517 25.6316 27.0077 21.7284 28.9012C18.2605 30.583 14.016 30.4503 10.5756 28.2633C10.5522 28.2484 10.5277 28.2372 10.5033 28.2253C6.38457 25.5731 4.48438 20.7219 5.46895 16.1265ZM10.2662 29.795C13.8813 31.8748 18.2353 32.034 21.8832 30.4478C22.9677 31.6275 23.8057 32.9657 24.3839 34.4404H24.1439C21.8973 34.4404 20.4061 36.865 21.5524 38.835H6.20713C6.40977 34.432 8.4208 31.5403 10.2662 29.795ZM1.46484 41.7089C1.46484 40.9319 2.09687 40.2999 2.87383 40.2999H47.1263C47.9032 40.2999 48.5353 40.9319 48.5353 41.7089V44.6039C48.5353 45.3809 47.9032 46.0129 47.1263 46.0129H2.87383C2.09687 46.0129 1.46484 45.3809 1.46484 44.6039V41.7089Z\"\n          fill={color ? color : '#571C56'}\n        />\n      </g>\n      <defs>\n        <clipPath id=\"clip0\">\n          <rect width=\"50\" height=\"50\" fill=\"white\" />\n        </clipPath>\n      </defs>\n    </svg>\n  );\n};\n\nexport default Entrepreneurship;\n","import React from 'react';\n\ninterface FashionProps {\n  color?: string;\n}\n\nexport const Fashion = ({ color }: FashionProps): JSX.Element => {\n  return (\n    <svg width=\"50\" height=\"50\" viewBox=\"0 0 50 50\" fill=\"none\">\n      <path\n        d=\"M43.75 13.2626V10.1563C43.75 9.94905 43.6677 9.75034 43.5212 9.60382C43.3747 9.45731 43.1759 9.375 42.9688 9.375H40.0803L36.9181 7.2668C37.3627 6.96307 37.7213 6.5496 37.959 6.06648C38.1968 5.58336 38.3056 5.047 38.275 4.50942C38.2444 3.97184 38.0755 3.45129 37.7844 2.99825C37.4934 2.54522 37.0903 2.17508 36.6141 1.92375C36.1379 1.67241 35.6048 1.5484 35.0666 1.56375C34.5284 1.5791 34.0032 1.73329 33.5421 2.01136C33.081 2.28943 32.6996 2.68195 32.4349 3.15083C32.1702 3.61971 32.0311 4.14905 32.0312 4.6875C32.0312 4.8947 32.1136 5.09342 32.2601 5.23993C32.4066 5.38644 32.6053 5.46875 32.8125 5.46875C33.0197 5.46875 33.2184 5.38644 33.3649 5.23993C33.5114 5.09342 33.5938 4.8947 33.5938 4.6875C33.5938 4.37847 33.6854 4.07638 33.8571 3.81942C34.0288 3.56247 34.2728 3.3622 34.5583 3.24394C34.8438 3.12568 35.158 3.09474 35.4611 3.15503C35.7642 3.21532 36.0426 3.36413 36.2611 3.58265C36.4796 3.80117 36.6284 4.07958 36.6887 4.38267C36.749 4.68577 36.7181 4.99994 36.5998 5.28545C36.4816 5.57095 36.2813 5.81498 36.0243 5.98667C35.7674 6.15836 35.4653 6.25 35.1562 6.25C35.002 6.24996 34.8512 6.29563 34.7229 6.38125L30.2322 9.375H27.3438C27.334 9.375 27.3249 9.37607 27.3154 9.37647C27.2928 9.37647 27.2703 9.375 27.2477 9.375H23.674L20.5117 7.2668C20.9563 6.96309 21.3149 6.54962 21.5527 6.0665C21.7905 5.58338 21.8994 5.04701 21.8688 4.50943C21.8382 3.97184 21.6692 3.45127 21.3782 2.99823C21.0872 2.54518 20.684 2.17504 20.2078 1.92369C19.7317 1.67235 19.1986 1.54834 18.6603 1.56369C18.1221 1.57904 17.597 1.73323 17.1359 2.01131C16.6748 2.28938 16.2934 2.68191 16.0286 3.1508C15.7639 3.61969 15.6249 4.14904 15.625 4.6875C15.625 4.8947 15.7073 5.09342 15.8538 5.23993C16.0003 5.38644 16.199 5.46875 16.4062 5.46875C16.6135 5.46875 16.8122 5.38644 16.9587 5.23993C17.1052 5.09342 17.1875 4.8947 17.1875 4.6875C17.1875 4.37847 17.2791 4.07638 17.4508 3.81942C17.6225 3.56247 17.8665 3.3622 18.1521 3.24394C18.4376 3.12568 18.7517 3.09474 19.0548 3.15503C19.3579 3.21532 19.6363 3.36413 19.8549 3.58265C20.0734 3.80117 20.2222 4.07958 20.2825 4.38267C20.3428 4.68577 20.3118 4.99994 20.1936 5.28545C20.0753 5.57095 19.875 5.81498 19.6181 5.98667C19.3611 6.15836 19.059 6.25 18.75 6.25C18.5957 6.24996 18.4449 6.29563 18.3166 6.38125L13.826 9.375H10.2523C9.38101 9.37413 8.53448 9.66503 7.84774 10.2013C7.161 10.7376 6.6736 11.4884 6.46328 12.334C6.4571 12.3583 6.45215 12.3828 6.44844 12.4077L4.69648 24.103C4.69062 24.1413 4.68762 24.18 4.6875 24.2187V39.8437C4.6875 40.0509 4.76981 40.2497 4.91632 40.3962C5.06284 40.5427 5.26155 40.625 5.46875 40.625H10.1562C10.3635 40.625 10.5622 40.5427 10.7087 40.3962C10.8552 40.2497 10.9375 40.0509 10.9375 39.8437V39.0625H15.625C15.8322 39.0625 16.0309 38.9802 16.1774 38.8337C16.3239 38.6872 16.4062 38.4884 16.4062 38.2812V37.5H21.0938V38.2812C21.0938 38.4884 21.1761 38.6872 21.3226 38.8337C21.4691 38.9802 21.6678 39.0625 21.875 39.0625H25.3897L25.0008 47.6208C24.996 47.7263 25.0126 47.8316 25.0497 47.9305C25.0868 48.0293 25.1435 48.1197 25.2164 48.196C25.2894 48.2723 25.377 48.3331 25.4741 48.3746C25.5712 48.4161 25.6757 48.4375 25.7812 48.4375H44.5312C44.6368 48.4375 44.7413 48.4161 44.8384 48.3746C44.9355 48.3331 45.0231 48.2723 45.0961 48.196C45.169 48.1197 45.2257 48.0293 45.2628 47.9305C45.2999 47.8316 45.3165 47.7263 45.3117 47.6208L43.75 13.2626ZM42.3248 16.3212C41.7171 16.1471 41.2718 15.7034 40.9734 14.9779C40.8548 14.6826 40.7668 14.3758 40.7109 14.0625H42.2222L42.3248 16.3212ZM42.1875 12.5H31.0658L31.052 12.4076C31.0482 12.3828 31.0433 12.3582 31.0371 12.3339C30.9111 11.8288 30.6853 11.3539 30.373 10.9374H42.1875V12.5ZM35.1562 7.97022L37.2635 9.375H33.049L35.1562 7.97022ZM25.6519 10.9375L25.2905 13.2873C25.247 13.5686 25.1213 13.8308 24.9293 14.0409C24.7372 14.251 24.4874 14.3997 24.2112 14.4683C23.9349 14.5369 23.6445 14.5224 23.3765 14.4265C23.1085 14.3306 22.8748 14.1577 22.7047 13.9295C23.4906 13.1084 24.0005 12.0624 24.1632 10.9375H25.6519ZM14.9224 10.9375H22.5781C22.3983 11.82 21.9191 12.6133 21.2216 13.183C20.5241 13.7528 19.6511 14.064 18.7505 14.064C17.8499 14.064 16.9769 13.7528 16.2794 13.183C15.5818 12.6133 15.1026 11.82 14.9229 10.9375H14.9224ZM18.75 7.97022L20.8572 9.375H16.6428L18.75 7.97022ZM13.3368 10.9375C13.4996 12.0624 14.0095 13.1084 14.7955 13.9295C14.6254 14.1577 14.3917 14.3306 14.1237 14.4265C13.8557 14.5224 13.5653 14.5369 13.289 14.4683C13.0128 14.3997 12.7629 14.251 12.5709 14.0409C12.3789 13.8308 12.2532 13.5686 12.2097 13.2873L11.8481 10.9375H13.3368ZM14.8438 37.5H10.9375V22.6562C10.9375 22.449 10.8552 22.2503 10.7087 22.1038C10.5622 21.9573 10.3635 21.875 10.1562 21.875C9.94905 21.875 9.75034 21.9573 9.60382 22.1038C9.45731 22.2503 9.375 22.449 9.375 22.6562V39.0625H6.25V24.2773L7.9874 12.679C8.11963 12.1794 8.41355 11.7375 8.82327 11.4225C9.233 11.1075 9.7355 10.9369 10.2523 10.9375H10.2672L10.6653 13.5254C10.7551 14.1587 11.0478 14.7458 11.4994 15.1987C11.951 15.6516 12.5373 15.9459 13.1703 16.0375C13.7363 16.1299 14.3168 16.0587 14.8438 15.8324V37.5ZM16.4062 35.9375V15.0958C17.1385 15.4442 17.9391 15.625 18.75 15.625C19.5609 15.625 20.3615 15.4442 21.0938 15.0958V35.9375H16.4062ZM22.6562 15.8321C23.1832 16.0584 23.7637 16.1295 24.3297 16.0372C24.9627 15.9456 25.5489 15.6513 26.0005 15.1985C26.4521 14.7456 26.7448 14.1586 26.8347 13.5254L27.2328 10.9375H27.2477C27.7645 10.9369 28.267 11.1075 28.6767 11.4225C29.0865 11.7375 29.3804 12.1794 29.5126 12.679L31.25 24.2773V39.0625H28.125V22.6562C28.125 22.449 28.0427 22.2503 27.8962 22.1038C27.7497 21.9573 27.551 21.875 27.3438 21.875C27.1365 21.875 26.9378 21.9573 26.7913 22.1038C26.6448 22.2503 26.5625 22.449 26.5625 22.6562V37.5H22.6562V15.8321ZM34.375 46.875H26.5988L26.8896 40.4785C27.0218 40.5738 27.1807 40.6251 27.3438 40.625H32.0312C32.2385 40.625 32.4372 40.5427 32.5837 40.3962C32.7302 40.2497 32.8125 40.0509 32.8125 39.8437V24.2187C32.8125 24.18 32.8096 24.1413 32.8039 24.1029L31.2998 14.0625H34.375V46.875ZM35.9375 46.875V14.0625H39.1281C39.1974 14.5631 39.3252 15.0538 39.509 15.5245C40.0623 16.9076 41.0764 17.7451 42.3979 17.9296L43.7137 46.875H35.9375Z\"\n        fill={color ? color : '#571C56'}\n      />\n    </svg>\n  );\n};\n\nexport default Fashion;\n","import React from 'react';\n\ninterface FilmProps {\n  color?: string;\n}\n\nexport const Film = ({ color }: FilmProps): JSX.Element => {\n  return (\n    <svg width=\"512\" height=\"512\" viewBox=\"0 0 512 512\" fill=\"none\">\n      <path\n        d=\"M503.322 494.644C465.044 494.644 433.898 463.499 433.898 425.22C433.898 425.142 433.855 425.073 433.855 424.995C476.846 379.826 503.322 318.794 503.322 251.661C503.322 112.9 390.422 0 251.661 0C112.9 0 0 112.9 0 251.661C0 390.422 112.9 503.322 251.661 503.322C315.357 503.322 373.569 479.484 417.948 440.32C425.125 480.985 460.635 512 503.322 512C508.121 512 512 508.121 512 503.322C512 498.523 508.121 494.644 503.322 494.644ZM17.3559 251.661C17.3559 122.463 122.463 17.3559 251.661 17.3559C380.859 17.3559 485.966 122.463 485.966 251.661C485.966 380.859 380.859 485.966 251.661 485.966C122.463 485.966 17.3559 380.859 17.3559 251.661Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M251.661 34.7119C132.035 34.7119 34.7119 132.035 34.7119 251.661C34.7119 371.287 132.035 468.61 251.661 468.61C371.287 468.61 468.61 371.287 468.61 251.661C468.61 132.035 371.287 34.7119 251.661 34.7119ZM251.661 451.254C141.598 451.254 52.0678 361.724 52.0678 251.661C52.0678 141.598 141.598 52.0678 251.661 52.0678C361.724 52.0678 451.254 141.598 451.254 251.661C451.254 361.724 361.724 451.254 251.661 451.254Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M355.797 190.915C352.915 190.915 350.104 191.184 347.327 191.575L347.127 191.219L340.619 192.885C340.532 192.911 340.454 192.946 340.367 192.972C337.165 193.814 334.058 194.881 331.082 196.218C330.952 196.278 330.83 196.348 330.7 196.4C327.784 197.727 324.981 199.246 322.334 201.008C322.265 201.051 322.187 201.095 322.126 201.138C319.679 202.778 317.388 204.626 315.21 206.596C314.767 206.996 314.325 207.386 313.891 207.794C311.877 209.72 309.986 211.777 308.25 213.964C307.877 214.433 307.538 214.919 307.174 215.396C305.447 217.704 303.833 220.091 302.444 222.633C302.418 222.685 302.384 222.737 302.358 222.798C300.96 225.375 299.806 228.1 298.782 230.886C298.6 231.381 298.409 231.875 298.236 232.379C297.316 235.112 296.595 237.932 296.066 240.822C295.971 241.36 295.901 241.907 295.814 242.454C295.363 245.465 295.051 248.52 295.051 251.661C295.051 254.802 295.363 257.857 295.823 260.877C295.91 261.424 295.971 261.962 296.075 262.508C296.595 265.398 297.324 268.219 298.244 270.952C298.409 271.455 298.609 271.941 298.791 272.436C299.806 275.222 300.969 277.947 302.366 280.524C302.392 280.576 302.427 280.628 302.453 280.689C303.842 283.231 305.456 285.618 307.174 287.918C307.53 288.395 307.877 288.881 308.25 289.358C309.986 291.545 311.869 293.602 313.891 295.528C314.325 295.936 314.767 296.327 315.21 296.726C317.397 298.696 319.679 300.544 322.135 302.184C322.204 302.228 322.274 302.271 322.343 302.314C324.99 304.067 327.793 305.586 330.709 306.922C330.839 306.983 330.96 307.052 331.09 307.105C334.067 308.441 337.165 309.508 340.367 310.35C340.454 310.376 340.532 310.411 340.619 310.437L347.127 312.103L347.327 311.747C350.104 312.138 352.915 312.407 355.797 312.407C389.285 312.407 416.542 285.149 416.542 251.661C416.542 218.173 389.285 190.915 355.797 190.915ZM347.119 251.661C347.119 265.364 344.133 278.962 338.449 291.38C336.28 290.426 334.214 289.289 332.253 288.013C331.55 287.562 330.917 287.041 330.24 286.546C328.825 285.505 327.463 284.394 326.179 283.197C325.589 282.65 325.007 282.095 324.46 281.522C323.003 279.986 321.649 278.354 320.416 276.628C320.2 276.315 319.939 276.046 319.722 275.725C318.342 273.668 317.18 271.464 316.164 269.182C315.878 268.531 315.652 267.845 315.392 267.177C314.715 265.416 314.142 263.602 313.7 261.736C313.517 260.99 313.327 260.244 313.188 259.48C312.728 256.937 312.407 254.334 312.407 251.661C312.407 248.988 312.728 246.385 313.196 243.842C313.335 243.079 313.526 242.332 313.708 241.586C314.151 239.72 314.724 237.906 315.401 236.145C315.661 235.477 315.887 234.791 316.173 234.14C317.188 231.858 318.351 229.654 319.731 227.597C319.939 227.285 320.208 227.007 320.425 226.695C321.649 224.959 323.003 223.327 324.469 221.8C325.024 221.219 325.606 220.672 326.187 220.125C327.463 218.919 328.825 217.817 330.249 216.776C330.917 216.29 331.559 215.769 332.262 215.309C334.232 214.033 336.288 212.897 338.458 211.942C344.133 224.36 347.119 237.959 347.119 251.661ZM355.797 295.051C355.753 295.051 355.718 295.042 355.675 295.042C361.394 281.331 364.475 266.57 364.475 251.661C364.475 236.752 361.394 221.991 355.675 208.28C355.718 208.28 355.753 208.271 355.797 208.271C379.722 208.271 399.186 227.736 399.186 251.661C399.186 275.586 379.722 295.051 355.797 295.051Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M195.072 289.358C195.445 288.89 195.784 288.404 196.148 287.926C197.866 285.627 199.48 283.24 200.869 280.706C200.904 280.645 200.938 280.585 200.973 280.515C202.37 277.938 203.524 275.222 204.54 272.436C204.722 271.941 204.913 271.455 205.086 270.952C206.006 268.219 206.735 265.398 207.256 262.5C207.351 261.962 207.421 261.415 207.508 260.877C207.959 257.866 208.271 254.802 208.271 251.661C208.271 248.52 207.959 245.456 207.499 242.445C207.412 241.898 207.351 241.36 207.247 240.822C206.726 237.932 205.998 235.112 205.078 232.37C204.913 231.867 204.713 231.381 204.531 230.877C203.516 228.092 202.361 225.375 200.964 222.807C200.93 222.746 200.895 222.685 200.86 222.616C199.472 220.082 197.858 217.687 196.139 215.387C195.784 214.91 195.436 214.424 195.072 213.955C193.336 211.768 191.453 209.712 189.431 207.785C188.997 207.377 188.555 206.987 188.112 206.588C185.925 204.618 183.643 202.769 181.187 201.129C181.118 201.086 181.048 201.051 180.979 201.008C178.332 199.255 175.529 197.736 172.613 196.4C172.483 196.339 172.353 196.27 172.223 196.209C169.246 194.881 166.14 193.805 162.937 192.963C162.851 192.937 162.773 192.903 162.694 192.877L156.186 191.21L155.986 191.566C153.218 191.184 150.407 190.915 147.525 190.915C114.037 190.915 86.7797 218.173 86.7797 251.661C86.7797 285.149 114.037 312.407 147.525 312.407C150.407 312.407 153.218 312.138 155.995 311.747L156.195 312.103L162.703 310.437C162.79 310.411 162.868 310.376 162.955 310.35C166.157 309.508 169.264 308.441 172.232 307.105C172.362 307.044 172.492 306.974 172.622 306.914C175.538 305.586 178.341 304.059 180.988 302.306C181.057 302.262 181.126 302.228 181.187 302.184C183.643 300.544 185.925 298.696 188.112 296.726C188.555 296.327 188.997 295.936 189.431 295.528C191.445 293.602 193.336 291.545 195.072 289.358ZM190.126 259.48C189.987 260.244 189.796 260.99 189.614 261.736C189.171 263.602 188.598 265.416 187.921 267.177C187.661 267.845 187.435 268.531 187.149 269.182C186.134 271.464 184.971 273.668 183.591 275.725C183.383 276.037 183.114 276.315 182.897 276.628C181.673 278.363 180.319 279.995 178.853 281.522C178.297 282.103 177.716 282.65 177.135 283.197C175.859 284.403 174.497 285.505 173.073 286.546C172.405 287.032 171.763 287.553 171.06 288.013C169.09 289.289 167.033 290.426 164.864 291.38C159.189 278.962 156.203 265.364 156.203 251.661C156.203 237.959 159.189 224.36 164.873 211.942C167.042 212.897 169.108 214.033 171.069 215.309C171.772 215.76 172.405 216.281 173.082 216.776C174.497 217.817 175.859 218.928 177.143 220.125C177.733 220.672 178.315 221.227 178.862 221.8C180.319 223.336 181.673 224.968 182.905 226.695C183.122 227.007 183.383 227.276 183.6 227.597C184.98 229.654 186.142 231.858 187.158 234.14C187.444 234.791 187.67 235.477 187.93 236.145C188.607 237.906 189.18 239.72 189.622 241.586C189.804 242.332 189.995 243.079 190.134 243.842C190.594 246.385 190.915 248.988 190.915 251.661C190.915 254.334 190.594 256.937 190.126 259.48ZM104.136 251.661C104.136 227.736 123.6 208.271 147.525 208.271C147.569 208.271 147.604 208.28 147.647 208.28C141.928 221.991 138.847 236.752 138.847 251.661C138.847 266.57 141.928 281.331 147.647 295.042C147.604 295.042 147.569 295.051 147.525 295.051C123.6 295.051 104.136 275.586 104.136 251.661Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M191.219 156.195L192.885 162.703C192.911 162.79 192.946 162.868 192.972 162.955C193.814 166.157 194.881 169.264 196.218 172.232C196.278 172.362 196.348 172.483 196.4 172.614C197.727 175.529 199.255 178.332 201.008 180.979C201.051 181.049 201.095 181.118 201.138 181.187C202.778 183.635 204.626 185.926 206.596 188.112C206.996 188.555 207.386 188.998 207.794 189.431C209.72 191.445 211.777 193.337 213.964 195.072C214.433 195.445 214.919 195.792 215.396 196.148C217.704 197.875 220.091 199.489 222.633 200.878C222.685 200.912 222.737 200.938 222.798 200.964C225.375 202.362 228.1 203.516 230.886 204.54C231.381 204.722 231.867 204.913 232.37 205.086C235.103 206.006 237.924 206.727 240.814 207.256C241.352 207.351 241.898 207.421 242.445 207.508C245.465 207.959 248.52 208.271 251.661 208.271C254.802 208.271 257.857 207.959 260.877 207.499C261.424 207.412 261.962 207.351 262.508 207.247C265.398 206.727 268.219 205.998 270.952 205.078C271.455 204.913 271.941 204.713 272.445 204.531C275.23 203.516 277.955 202.353 280.533 200.956C280.585 200.93 280.637 200.895 280.698 200.869C283.24 199.481 285.627 197.866 287.935 196.139C288.412 195.784 288.898 195.437 289.367 195.063C291.554 193.328 293.61 191.445 295.537 189.423C295.945 188.989 296.335 188.546 296.734 188.104C298.704 185.926 300.553 183.635 302.193 181.187C302.236 181.118 302.28 181.049 302.323 180.979C304.076 178.332 305.595 175.529 306.931 172.614C306.992 172.483 307.061 172.362 307.113 172.232C308.441 169.255 309.517 166.148 310.359 162.946C310.385 162.86 310.42 162.781 310.446 162.695L312.112 156.186L311.756 155.987C312.138 153.218 312.407 150.407 312.407 147.526C312.407 114.037 285.149 86.7798 251.661 86.7798C218.173 86.7798 190.915 114.037 190.915 147.526C190.915 150.407 191.184 153.218 191.575 155.995L191.219 156.195ZM288.013 171.069C287.562 171.772 287.041 172.405 286.546 173.073C285.505 174.488 284.394 175.85 283.197 177.135C282.65 177.716 282.095 178.306 281.522 178.853C279.986 180.311 278.354 181.665 276.628 182.897C276.315 183.114 276.046 183.374 275.725 183.591C273.668 184.971 271.464 186.134 269.182 187.149C268.531 187.436 267.845 187.661 267.177 187.921C265.416 188.598 263.602 189.171 261.736 189.614C260.99 189.796 260.244 189.987 259.48 190.126C256.937 190.594 254.334 190.915 251.661 190.915C248.988 190.915 246.385 190.594 243.842 190.126C243.079 189.987 242.332 189.796 241.586 189.614C239.72 189.171 237.906 188.598 236.145 187.921C235.477 187.661 234.8 187.436 234.14 187.149C231.858 186.134 229.654 184.971 227.597 183.591C227.285 183.383 227.007 183.114 226.695 182.897C224.959 181.673 223.327 180.311 221.8 178.853C221.219 178.298 220.672 177.716 220.125 177.135C218.928 175.859 217.817 174.497 216.776 173.073C216.29 172.405 215.769 171.763 215.309 171.069C214.033 169.099 212.888 167.042 211.942 164.873C236.77 153.505 266.544 153.505 291.38 164.873C290.426 167.042 289.289 169.108 288.013 171.069ZM251.661 104.136C275.586 104.136 295.051 123.6 295.051 147.526C295.051 147.578 295.034 147.63 295.034 147.682C267.568 136.383 235.746 136.383 208.289 147.682C208.289 147.63 208.271 147.578 208.271 147.526C208.271 123.6 227.736 104.136 251.661 104.136Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M312.103 347.127L310.437 340.619C310.411 340.532 310.376 340.454 310.35 340.376C309.508 337.174 308.432 334.067 307.105 331.09C307.044 330.96 306.974 330.83 306.914 330.7C305.586 327.784 304.059 324.981 302.306 322.334C302.262 322.265 302.228 322.195 302.184 322.126C300.544 319.67 298.696 317.388 296.726 315.201C296.327 314.758 295.936 314.316 295.528 313.882C293.602 311.86 291.545 309.977 289.358 308.241C288.89 307.868 288.404 307.53 287.926 307.174C285.627 305.456 283.24 303.842 280.698 302.453C280.637 302.418 280.576 302.384 280.507 302.349C277.929 300.952 275.213 299.798 272.436 298.782C271.941 298.6 271.447 298.409 270.943 298.236C268.21 297.316 265.39 296.595 262.491 296.066C261.953 295.971 261.415 295.901 260.868 295.814C257.866 295.363 254.802 295.051 251.661 295.051C248.52 295.051 245.456 295.363 242.445 295.823C241.898 295.91 241.36 295.971 240.822 296.075C237.932 296.604 235.112 297.324 232.37 298.244C231.867 298.409 231.381 298.609 230.886 298.791C228.1 299.806 225.384 300.96 222.807 302.358C222.746 302.392 222.685 302.427 222.616 302.462C220.082 303.85 217.695 305.456 215.396 307.183C214.919 307.538 214.433 307.885 213.964 308.259C211.777 309.994 209.72 311.877 207.794 313.899C207.386 314.333 206.996 314.776 206.596 315.218C204.626 317.397 202.778 319.688 201.138 322.143C201.095 322.213 201.06 322.282 201.016 322.352C199.263 324.998 197.736 327.801 196.408 330.717C196.348 330.847 196.278 330.978 196.218 331.108C194.89 334.084 193.814 337.182 192.972 340.384C192.946 340.471 192.903 340.549 192.885 340.636L191.219 347.145L191.575 347.344C191.184 350.104 190.915 352.915 190.915 355.797C190.915 389.285 218.173 416.542 251.661 416.542C285.149 416.542 312.407 389.285 312.407 355.797C312.407 352.915 312.138 350.104 311.747 347.327L312.103 347.127ZM215.309 332.253C215.76 331.55 216.281 330.917 216.776 330.249C217.817 328.834 218.928 327.472 220.125 326.187C220.672 325.606 221.227 325.016 221.8 324.469C223.336 323.011 224.968 321.657 226.695 320.425C227.007 320.208 227.276 319.948 227.597 319.731C229.654 318.351 231.858 317.188 234.14 316.173C234.791 315.887 235.477 315.661 236.145 315.401C237.906 314.724 239.72 314.151 241.586 313.708C242.332 313.526 243.079 313.335 243.842 313.196C246.385 312.728 248.988 312.407 251.661 312.407C254.334 312.407 256.937 312.728 259.48 313.196C260.244 313.335 260.99 313.526 261.736 313.708C263.602 314.151 265.416 314.724 267.177 315.401C267.845 315.661 268.522 315.887 269.182 316.173C271.464 317.188 273.668 318.351 275.725 319.731C276.037 319.939 276.315 320.208 276.628 320.425C278.363 321.649 279.995 323.011 281.522 324.469C282.103 325.024 282.65 325.606 283.197 326.187C284.394 327.463 285.505 328.825 286.546 330.249C287.032 330.917 287.553 331.559 288.013 332.253C289.289 334.223 290.434 336.28 291.38 338.449C266.552 349.817 236.778 349.817 211.942 338.449C212.897 336.28 214.033 334.214 215.309 332.253ZM251.661 399.186C227.736 399.186 208.271 379.722 208.271 355.797C208.271 355.753 208.28 355.718 208.28 355.675C221.991 361.394 236.752 364.475 251.661 364.475C266.57 364.475 281.331 361.394 295.042 355.675C295.042 355.718 295.051 355.753 295.051 355.797C295.051 379.722 275.586 399.186 251.661 399.186Z\"\n        fill={color ? color : '#571C56'}\n      />\n    </svg>\n  );\n};\n\nexport default Film;\n","import React from 'react';\n\ninterface FitnessProps {\n  color?: string;\n}\n\nexport const Fitness = ({ color }: FitnessProps): JSX.Element => {\n  return (\n    <svg width=\"50\" height=\"50\" viewBox=\"0 0 50 50\" fill=\"none\">\n      <path\n        d=\"M47.9518 10.9337H45.6064V8.98476C45.6064 7.43961 44.3493 6.18255 42.8043 6.18255H40.569C39.0238 6.18255 37.7668 7.43961 37.7668 8.98476V17.0079H34.021V14.8538C34.021 13.2905 32.7492 12.0188 31.186 12.0188C30.5718 12.0188 30.0032 12.2159 29.5387 12.5492C29.082 11.5947 28.1067 10.9337 26.9799 10.9337C25.9146 10.9337 24.9848 11.5244 24.5006 12.3954C24.022 12.0264 23.4234 11.8057 22.7736 11.8057C21.7876 11.8057 20.9183 12.3123 20.4104 13.0784C19.9143 12.6529 19.2706 12.3951 18.5675 12.3951C17.0042 12.3951 15.7325 13.6668 15.7325 15.2301V17.0081H12.2335V14.9419C12.2335 14.5376 11.9057 14.2099 11.5015 14.2099C11.0973 14.2099 10.7696 14.5376 10.7696 14.9419V31.9453C10.7696 32.6832 10.1692 33.2835 9.43134 33.2835H7.19574C6.45776 33.2835 5.85748 32.6832 5.85748 31.9453V8.98476C5.85748 8.24678 6.45786 7.6464 7.19574 7.6464H9.43105C10.169 7.6464 10.7693 8.24678 10.7693 8.98476V11.8225C10.7693 12.2268 11.097 12.5544 11.5012 12.5544C11.9055 12.5544 12.2332 12.2268 12.2332 11.8225V8.98476C12.2332 7.43961 10.9761 6.18255 9.43105 6.18255H7.19574C5.65059 6.18255 4.39362 7.43961 4.39362 8.98476V10.9337H2.04823C0.918814 10.9337 0 11.8526 0 12.9819V27.948C0 29.0774 0.918814 29.9962 2.04823 29.9962H4.39362V31.9452C4.39362 33.4902 5.65068 34.7473 7.19574 34.7473H9.43105C10.9762 34.7473 12.2332 33.4902 12.2332 31.9452V23.9221H14.7414V25.2586C14.7414 25.9454 14.9817 26.6158 15.4181 27.1464L17.6912 29.91V43.0854C17.6912 43.4897 18.0189 43.8173 18.4231 43.8173C18.8274 43.8173 19.1551 43.4897 19.1551 43.0854V29.6477C19.1551 29.4781 19.0961 29.3137 18.9884 29.1827L16.5486 26.2164C16.3272 25.9472 16.2052 25.607 16.2052 25.2586V23.9221L30.0472 24.0067C30.4515 24.0067 30.7792 23.6791 30.7792 23.2747C30.7792 22.8704 30.4515 22.5428 30.0472 22.5428H26.717C26.0299 22.5428 25.4709 21.9838 25.4709 21.2969C25.4709 20.6098 26.0299 20.0508 26.717 20.0508H33.0103C33.4427 20.0508 33.7945 20.4026 33.7945 20.835V25.2585C33.7945 25.607 33.6725 25.9472 33.4511 26.2163L31.0113 29.1826C30.9036 29.3136 30.8446 29.4779 30.8446 29.6476V31.578C30.8446 31.9823 31.1724 32.31 31.5766 32.31C31.9808 32.31 32.3085 31.9823 32.3085 31.578V29.9099L34.5816 27.1463C35.0179 26.6157 35.2583 25.9453 35.2583 25.2585V23.922H37.7665V31.9451C37.7665 33.4901 39.0236 34.7472 40.5687 34.7472H42.804C44.3491 34.7472 45.6061 33.4901 45.6061 31.9451V29.9961H47.9515C49.0809 29.9961 49.9997 29.0773 49.9997 27.9479V12.9819C50 11.8526 49.0812 10.9337 47.9518 10.9337ZM2.04823 28.5323C1.72599 28.5323 1.46386 28.2701 1.46386 27.948V12.9819C1.46386 12.6596 1.72599 12.3976 2.04823 12.3976H4.39362V28.5323H2.04823ZM31.1859 13.4827C31.942 13.4827 32.5571 14.0978 32.5571 14.8538V17.5789C32.5571 17.9653 32.3931 18.3289 32.1125 18.5871H30.2592C29.9786 18.3289 29.8147 17.9653 29.8147 17.5789V14.8538C29.8147 14.0978 30.4298 13.4827 31.1859 13.4827ZM25.6085 13.7687C25.6085 13.0127 26.2236 12.3976 26.9797 12.3976C27.7357 12.3976 28.3508 13.0127 28.3508 13.7687V17.5789C28.3508 17.9653 28.1869 18.3289 27.9063 18.5871H26.7171C26.515 18.5871 26.3183 18.61 26.1288 18.6522C25.8029 18.3949 25.6084 18.0034 25.6084 17.5789V13.7687H25.6085ZM21.4023 14.6406C21.4023 13.8846 22.0174 13.2695 22.7734 13.2695C23.5295 13.2695 24.1447 13.8846 24.1447 14.6406V17.5788C24.1447 18.3349 23.5296 18.95 22.7734 18.95C22.0173 18.95 21.4023 18.3349 21.4023 17.5788V14.6406ZM17.196 15.23C17.196 14.4739 17.8111 13.8588 18.5672 13.8588C19.3232 13.8588 19.9383 14.4739 19.9383 15.23V17.5789C19.9383 18.335 19.3232 18.9501 18.5672 18.9501C17.8111 18.9501 17.196 18.335 17.196 17.5789V15.23ZM12.2333 18.4717H15.8771C16.2521 19.5987 17.316 20.4139 18.5673 20.4139C19.4009 20.4139 20.1516 20.052 20.6707 19.4774C21.1899 20.0519 21.94 20.4139 22.7735 20.4139C23.3773 20.4139 23.9362 20.2223 24.3965 19.8993C24.1496 20.3076 24.0074 20.7859 24.0074 21.2969C24.0074 21.7122 24.1015 22.106 24.2693 22.4581H12.2333V18.4717ZM35.2586 22.4582V20.8351C35.2586 19.8654 34.6414 19.0373 33.7793 18.7225C33.8154 18.6407 33.8475 18.5569 33.8758 18.4717H37.7668V22.4582H35.2586ZM48.5361 27.948C48.5361 28.2702 48.274 28.5323 47.9518 28.5323H45.6064V26.4171C45.6064 26.0128 45.2787 25.6852 44.8744 25.6852C44.4702 25.6852 44.1425 26.0128 44.1425 26.4171V31.9452C44.1425 32.6831 43.5421 33.2834 42.8043 33.2834H40.569C39.831 33.2834 39.2307 32.6831 39.2307 31.9452V8.98476C39.2307 8.24678 39.8311 7.6464 40.569 7.6464H42.8043C43.5422 7.6464 44.1425 8.24678 44.1425 8.98476V23.2979C44.1425 23.7022 44.4702 24.0298 44.8744 24.0298C45.2787 24.0298 45.6064 23.7022 45.6064 23.2979V12.3976H47.9518C48.274 12.3976 48.5361 12.6597 48.5361 12.9819V27.948Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M31.5768 33.9654C31.1726 33.9654 30.8448 34.293 30.8448 34.6973V43.0853C30.8448 43.4896 31.1726 43.8172 31.5768 43.8172C31.981 43.8172 32.3087 43.4896 32.3087 43.0853V34.6973C32.3087 34.293 31.9811 33.9654 31.5768 33.9654Z\"\n        fill={color ? color : '#571C56'}\n      />\n    </svg>\n  );\n};\n\nexport default Fitness;\n","import React from 'react';\n\ninterface LeadershipProps {\n  color?: string;\n}\n\nexport const Leadership = ({ color }: LeadershipProps): JSX.Element => {\n  return (\n    <svg width=\"50\" height=\"50\" viewBox=\"0 0 50 50\" fill=\"none\">\n      <g clipPath=\"url(#clip0)\">\n        <path\n          d=\"M49.2684 34.8825H46.3143C45.9098 34.8825 45.5818 35.2104 45.5818 35.6149C45.5818 36.0195 45.9098 36.3474 46.3143 36.3474H48.5359V48.5352H37.8869L37.8866 36.3474H43.122C43.5265 36.3474 43.8544 36.0195 43.8544 35.6149C43.8544 35.2104 43.5265 34.8825 43.122 34.8825H40.912V28.0312C40.912 27.1767 40.4211 26.3867 39.6578 26.0069L34.8339 23.0697V21.2906C34.8339 20.886 34.506 20.5582 34.1015 20.5582C33.697 20.5582 33.369 20.886 33.369 21.2906V22.7487H28.7665V15.9089C28.7665 15.5043 28.4386 15.1765 28.0341 15.1765H27.1503C26.956 15.1765 26.7697 15.2537 26.6323 15.391L24.0474 17.977C23.9873 18.037 23.9176 18.0871 23.8403 18.1257L20.9501 19.5711V17.7913L22.9066 16.8129C22.977 16.7777 23.0413 16.7313 23.097 16.6758L25.9544 13.8183C26.1051 13.6676 26.3051 13.5845 26.5167 13.5845L37.1534 13.5962C37.6003 13.5547 37.8446 13.3105 37.8866 12.8638V9.82861C37.8866 9.39844 38.2366 9.04844 38.6669 9.04844C39.0972 9.04844 39.4472 9.39844 39.4472 9.82861V13.8463C39.4083 14.603 38.9688 15.0425 38.1288 15.1646H34.1015C33.697 15.1646 33.369 15.4925 33.369 15.8971V18.0992C33.369 18.5038 33.697 18.8316 34.1015 18.8316C34.506 18.8316 34.8339 18.5038 34.8339 18.0992V16.6295H38.1288C39.5934 16.6295 40.912 15.3183 40.912 13.8463V9.82861C40.912 8.84717 40.2787 8.01143 39.3995 7.70693V6.01504H42.469V8.31602C42.469 8.7206 42.797 9.04844 43.2015 9.04844H46.2349C46.6394 9.04844 46.9673 8.7206 46.9673 8.31602V5.28262C46.9673 4.87803 46.6394 4.5502 46.2349 4.5502H43.9339V2.24912C43.9339 1.84453 43.606 1.5167 43.2015 1.5167H39.3995V0.732422C39.3995 0.327832 39.0716 0 38.6671 0C38.2626 0 37.9347 0.327832 37.9347 0.732422V7.70693C37.0553 8.01123 36.4218 8.84717 36.4218 9.82871V12.1307L33.6505 12.1276C33.9198 11.6771 34.0752 11.151 34.0752 10.5891V9.07236C34.0752 7.41406 32.7261 6.06484 31.0677 6.06484C29.4093 6.06484 28.0602 7.41396 28.0602 9.07236V10.5891C28.0602 11.1486 28.2143 11.6727 28.4815 12.1219L26.5174 12.1197C25.9137 12.1197 25.3458 12.3552 24.9185 12.7825L22.1451 15.5559L16.8832 18.1872L12.4178 18.1923C12.6863 17.7423 12.8412 17.2169 12.8412 16.6558V15.1391C12.8412 13.4808 11.4921 12.1315 9.83369 12.1315C8.17539 12.1315 6.82627 13.4807 6.82627 15.1391V16.6558C6.82627 17.2192 6.98232 17.7469 7.25313 18.1981L6.75381 18.1987C4.70273 18.1987 3.03408 19.867 3.03408 21.9175V30.5308C3.03408 32.2864 4.46641 33.2674 6.06787 33.3142V44.0024H0.733398C0.328906 44.0024 0.000976562 44.3303 0.000976562 44.7349V49.2672C0.000976562 49.6718 0.328906 49.9996 0.733398 49.9996L49.2684 50C49.6729 50 50.0008 49.6722 50.0008 49.2676V35.6149C50.0008 35.2104 49.6729 34.8825 49.2684 34.8825ZM45.5023 7.5835H43.9338V6.01504H45.5023V7.5835ZM42.4689 2.98154V4.5502H39.3994V2.98154H42.4689ZM29.525 10.5892V9.07236C29.525 8.22178 30.217 7.52969 31.0677 7.52969C31.9184 7.52969 32.6104 8.22178 32.6104 9.07236V10.5891C32.6103 12.5372 29.525 12.6083 29.525 10.5892ZM36.4217 37.9158H31.8V27.2836L36.3903 29.4611L36.4217 37.9158ZM33.8956 24.2136C33.8956 24.2136 38.9693 27.3013 38.9922 27.3121C39.2686 27.4432 39.4471 27.7254 39.4471 28.0312V34.8823H37.8552V28.9978C37.8552 28.7149 37.6923 28.4572 37.4366 28.336L31.3814 25.4637C30.7624 25.192 30.3311 25.4605 30.3352 26.1254V37.9156H28.7666V24.2136H33.8956ZM8.29102 16.656V15.1393C8.29102 14.2887 8.98301 13.5966 9.83369 13.5966C10.6843 13.5966 11.3763 14.2887 11.3763 15.1393V16.656C11.3763 18.5972 8.29102 18.681 8.29102 16.656ZM4.49883 30.531V21.9177C4.49883 20.6748 5.51035 19.6638 6.75459 19.6638L17.0573 19.6521C17.1707 19.652 17.2826 19.6255 17.3841 19.5747L19.4853 18.524V20.3038L17.7741 21.1596C17.6631 21.2147 17.5396 21.2439 17.4169 21.2439H12.8671C12.4626 21.2439 12.1347 21.5718 12.1347 21.9764V24.1063C12.1347 24.5108 12.4626 24.8387 12.8671 24.8387C13.2716 24.8387 13.5995 24.5108 13.5995 24.1063V22.7088H17.4169C17.7649 22.7088 18.1142 22.6265 18.428 22.4703L24.4955 19.4361C24.714 19.327 24.9117 19.1845 25.0834 19.0128L27.3018 16.7936L27.302 37.9159H25.0009C24.5964 37.9159 24.2685 38.2438 24.2685 38.6483V40.9494H19.678V34.0983C19.678 33.2437 19.1871 32.4537 18.4237 32.074L13.5995 29.1365V27.2977C13.5995 26.8931 13.2716 26.5652 12.8671 26.5652C12.4626 26.5652 12.1347 26.8931 12.1347 27.2977V28.8152H7.53262V23.4529C7.53262 23.0483 7.20469 22.7205 6.8002 22.7205C6.3957 22.7205 6.06777 23.0483 6.06777 23.4529V31.8497C5.15215 31.8449 4.49561 31.5642 4.49883 30.531ZM16.2027 34.4029L10.1476 31.5307C9.53447 31.2834 9.10723 31.5764 9.10127 32.1924V43.9826H7.53262L7.53291 30.2803H12.6616C12.6616 30.2803 17.7354 33.3681 17.7583 33.3789C18.0346 33.51 18.2131 33.7921 18.2131 34.0979V40.949H16.6212V35.0645C16.6212 34.7818 16.4583 34.5241 16.2027 34.4029ZM10.5661 33.3505L15.1564 35.5279V40.9493H12.8671C12.4626 40.9493 12.1347 41.2771 12.1347 41.6817V44.0027H10.566V33.3505H10.5661ZM1.46582 45.4675H12.1347V48.535H1.46582V45.4675ZM13.5995 42.4141H24.2684V48.535H13.5995V42.4141ZM25.7332 39.3807H36.4217V48.535H25.7332V39.3807Z\"\n          fill={color ? color : '#571C56'}\n        />\n      </g>\n      <defs>\n        <clipPath id=\"clip0\">\n          <rect width=\"50\" height=\"50\" fill=\"white\" />\n        </clipPath>\n      </defs>\n    </svg>\n  );\n};\n\nexport default Leadership;\n","import React from 'react';\n\ninterface TechnologyProps {\n  color?: string;\n}\n\nexport const Technology = ({ color }: TechnologyProps): JSX.Element => {\n  return (\n    <svg width=\"50\" height=\"50\" viewBox=\"0 0 50 50\" fill=\"none\">\n      <g clipPath=\"url(#clip0)\">\n        <path\n          d=\"M8.9377 5.49445H8.92588C7.11738 5.52091 5.64648 7.01447 5.64648 8.82384V13.5817H0.735937C0.329492 13.5817 0 13.9111 0 14.3176C0 14.724 0.329492 15.0535 0.735937 15.0535H5.64658V18.9229H0.735937C0.329492 18.9229 0 19.2524 0 19.6588C0 20.0652 0.329492 20.3947 0.735937 20.3947H5.64658V24.264H0.735937C0.329492 24.2641 0 24.5936 0 25C0 25.4065 0.329492 25.7359 0.735937 25.7359H5.64658V29.6052H0.735937C0.329492 29.6052 0 29.9347 0 30.3411C0 30.7476 0.329492 31.0771 0.735937 31.0771H5.64658V34.9464H0.735937C0.329492 34.9464 0 35.2759 0 35.6823C0 36.0888 0.329492 36.4183 0.735937 36.4183H5.64658V38.9349C5.64658 39.3411 5.97627 39.6708 6.38252 39.6708C6.78877 39.6708 7.11846 39.3411 7.11846 38.9349V8.82394C7.11846 7.81417 7.93877 6.98116 8.94854 6.96544C9.35479 6.95958 9.67959 6.62589 9.67275 6.21866C9.6668 5.81632 9.33906 5.49445 8.9377 5.49445Z\"\n          fill={color ? color : '#571C56'}\n        />\n        <path\n          d=\"M40.0555 42.7294H8.97695C8.21845 42.7294 7.54335 42.2761 7.25585 41.5744C7.10175 41.1977 6.67294 41.0181 6.29618 41.1721C5.91933 41.3262 5.73984 41.756 5.89384 42.1317C6.408 43.3888 7.61796 44.2012 8.97695 44.2012H13.5817V49.2639C13.5817 49.6703 13.9112 49.9998 14.3177 49.9998C14.7241 49.9998 15.0536 49.6703 15.0536 49.2639V44.2012H18.9229V49.2639C18.9229 49.6703 19.2524 49.9998 19.6589 49.9998C20.0653 49.9998 20.3948 49.6703 20.3948 49.2639V44.2012H24.2641V49.2639C24.2641 49.6703 24.5935 49.9998 25 49.9998C25.4064 49.9998 25.7359 49.6703 25.7359 49.2639V44.2012H29.6052V49.2639C29.6052 49.6703 29.9347 49.9998 30.3411 49.9998C30.7476 49.9998 31.077 49.6703 31.077 49.2639V44.2012H34.9464V49.2639C34.9464 49.6703 35.2759 49.9998 35.6823 49.9998C36.0888 49.9998 36.4183 49.6703 36.4183 49.2639V44.2012H40.0555C40.4617 44.2012 40.7914 43.8715 40.7914 43.4652C40.7914 43.0582 40.4617 42.7294 40.0555 42.7294Z\"\n          fill={color ? color : '#571C56'}\n        />\n        <path\n          d=\"M34.9813 12.5135H15.0187C13.7214 12.5135 12.6666 13.5684 12.6666 14.8655V34.8293C12.6666 36.1266 13.7215 37.1814 15.0187 37.1814H34.9814C36.2787 37.1814 37.3335 36.1265 37.3335 34.8293V14.8655C37.3335 13.5683 36.2786 12.5135 34.9813 12.5135ZM14.1384 14.8655C14.1384 14.3798 14.5328 13.9854 15.0186 13.9854H30.2417V21.6716C28.9112 21.9591 27.8603 23.0101 27.5729 24.3406H22.1494V20.5667C23.5398 20.2949 24.5918 19.0673 24.5918 17.5984C24.5918 15.9312 23.2347 14.5741 21.5666 14.5741C20.0977 14.5741 18.8702 15.626 18.5982 17.0154H14.1384V14.8655ZM30.9778 23.065C32.0866 23.065 32.9885 23.9677 32.9885 25.0766C32.9885 26.1855 32.0867 27.0872 30.9778 27.0872C29.861 27.0872 28.9662 26.1766 28.9662 25.0766C28.9663 23.9745 29.8636 23.065 30.9778 23.065ZM21.5666 19.1517C20.7155 19.1517 20.0133 18.4595 20.0133 17.5984C20.0133 16.7427 20.71 16.046 21.5666 16.046C22.4232 16.046 23.1199 16.7427 23.1199 17.5984C23.1199 18.4624 22.4164 19.1517 21.5666 19.1517ZM18.3883 31.18C17.9614 30.9405 17.673 30.4823 17.673 29.9593C17.673 29.187 18.302 28.559 19.0742 28.559C19.8465 28.559 20.4745 29.187 20.4745 29.9593C20.4744 31.0294 19.317 31.705 18.3883 31.18ZM24.3404 35.7095H19.4029V32.8128C20.8326 32.6499 21.9464 31.4321 21.9464 29.9593C21.9464 28.3755 20.658 27.0871 19.0742 27.0871C17.4895 27.0871 16.2011 28.3755 16.2011 29.9593C16.2011 31.1368 16.9135 32.1525 17.9311 32.5949V35.7095H15.0187C14.5329 35.7095 14.1385 35.3141 14.1385 34.8293V18.4873H18.6748C18.6811 18.4975 19.0766 19.9982 20.6775 20.4901V25.0766C20.6775 25.4828 21.0072 25.8125 21.4135 25.8125H24.3404V35.7095ZM35.8616 34.8293C35.8616 35.3141 35.4672 35.7095 34.9814 35.7095H25.8123V32.5269H35.8616V34.8293ZM35.8616 31.055H25.8123V25.8125H27.5729C27.9114 27.3806 29.3097 28.5591 30.9778 28.5591C32.8981 28.5591 34.4604 26.9969 34.4604 25.0766C34.4604 23.4084 33.2818 22.0102 31.7138 21.6716C31.7138 21.6716 31.7137 21.6716 31.7136 21.6716V13.9854H34.9813C35.4671 13.9854 35.8615 14.3798 35.8615 14.8655V31.055H35.8616Z\"\n          fill={color ? color : '#571C56'}\n        />\n        <path\n          d=\"M49.2641 20.3948C49.6705 20.3948 50 20.0653 50 19.6589C50 19.2524 49.6705 18.9229 49.2641 18.9229H44.3534V15.0536H49.2641C49.6705 15.0536 50 14.7241 50 14.3177C50 13.9112 49.6705 13.5817 49.2641 13.5817H44.3534V8.82393C44.3534 6.98799 42.86 5.49356 41.0231 5.49356H36.4183V0.735937C36.4183 0.329492 36.0888 0 35.6823 0C35.2759 0 34.9464 0.329492 34.9464 0.735937V5.49346H31.0771V0.735937C31.0771 0.329492 30.7476 0 30.3411 0C29.9347 0 29.6052 0.329492 29.6052 0.735937V5.49346H25.7359V0.735937C25.7359 0.329492 25.4065 0 25 0C24.5936 0 24.2641 0.329492 24.2641 0.735937V5.49346H20.3948V0.735937C20.3948 0.329492 20.0653 0 19.6589 0C19.2524 0 18.923 0.329492 18.923 0.735937V5.49346H15.0536V0.735937C15.0536 0.329492 14.7241 0 14.3177 0C13.9112 0 13.5817 0.329492 13.5817 0.735937V5.49346H11.8815C11.4743 5.49346 11.1456 5.82314 11.1456 6.22939C11.1456 6.63564 11.4743 6.96533 11.8815 6.96533C15.7367 6.96533 37.9377 6.96533 41.0231 6.96533C42.0485 6.96533 42.8816 7.79941 42.8816 8.82383V40.8709C42.8816 41.3841 42.6775 41.862 42.3056 42.2162C42.0112 42.4969 41.9994 42.963 42.2801 43.2563C42.4253 43.4084 42.6187 43.485 42.8129 43.485C42.9954 43.485 43.1779 43.4173 43.3212 43.2818C43.9865 42.647 44.3535 41.7903 44.3535 40.8709V36.4183H49.2642C49.6706 36.4183 50.0001 36.0888 50.0001 35.6823C50.0001 35.2759 49.6706 34.9464 49.2642 34.9464H44.3535V31.0771H49.2642C49.6706 31.0771 50.0001 30.7476 50.0001 30.3411C50.0001 29.9347 49.6706 29.6052 49.2642 29.6052H44.3535V25.7359H49.2642C49.6706 25.7359 50.0001 25.4064 50.0001 25C50.0001 24.5936 49.6706 24.2641 49.2642 24.2641H44.3535V20.3948H49.2641Z\"\n          fill={color ? color : '#571C56'}\n        />\n      </g>\n      <defs>\n        <clipPath id=\"clip0\">\n          <rect width=\"50\" height=\"50\" fill=\"white\" />\n        </clipPath>\n      </defs>\n    </svg>\n  );\n};\n\nexport default Technology;\n","import React from 'react';\n\ninterface BrandProps {\n  color?: string;\n}\n\nexport const Brand = ({ color }: BrandProps): JSX.Element => {\n  return (\n    <svg width=\"512\" height=\"512\" viewBox=\"0 0 512 512\" fill=\"none\">\n      <path\n        d=\"M512 204.283C512 203.766 512 203.248 512 203.248L493.899 55.3373C491.83 39.8221 478.384 28.4443 462.869 28.4443H49.6485C34.1333 28.4443 21.204 39.8221 18.6182 55.3373L0 202.731C0 203.248 0 203.766 0 204.283C0 229.107 17.5838 250.311 41.3737 254.966V400.808H40.8566C28.4444 400.808 16.5495 408.565 12.4121 419.943L3.6202 440.63C-0.517172 449.939 0.517172 460.8 6.20606 469.592C11.8949 478.384 21.7212 483.555 32.0646 483.555H479.935C490.279 483.555 500.105 478.384 505.794 470.109C511.483 461.834 513.034 450.974 508.897 440.63L500.622 420.46C496.485 410.117 486.659 402.877 475.798 401.325V253.414C497.002 246.691 512 227.038 512 204.283ZM480.97 428.735L489.762 448.905C491.313 452.008 490.796 455.111 488.727 458.214C486.659 461.317 483.556 462.869 479.935 462.869H32.0646C28.4444 462.869 25.3414 461.317 23.2727 458.214C21.204 455.111 21.204 452.008 22.2384 448.905L31.0303 428.218C32.5818 424.598 36.7192 422.012 40.3394 422.012H471.143C475.281 422.012 479.418 424.598 480.97 428.735ZM155.152 338.747H165.495V400.808H62.0606V256H67.2323C84.299 256 99.297 247.725 108.606 235.313C117.915 247.725 132.913 256 149.98 256H165.495V318.06H155.152C149.463 318.06 144.808 322.715 144.808 328.404C144.808 334.093 149.463 338.747 155.152 338.747ZM330.99 338.747V400.808H186.182V338.747H330.99ZM186.182 318.06V251.345C194.457 247.725 201.697 242.553 206.869 235.313C216.178 247.725 231.176 256 248.242 256H263.758C280.824 256 295.822 247.725 305.131 235.313C311.337 244.105 320.646 250.311 330.99 253.414V318.06H186.182ZM408.566 318.06H351.677V256H362.02C379.087 256 394.085 247.725 403.394 235.313C412.703 247.725 427.701 256 444.768 256H455.111V400.808H351.677V338.747H408.566C414.255 338.747 418.909 334.093 418.909 328.404C418.909 322.715 414.255 318.06 408.566 318.06ZM460.283 235.313H444.768C427.701 235.313 413.737 221.349 413.737 204.283C413.737 198.594 409.083 193.939 403.394 193.939C397.705 193.939 393.051 198.594 393.051 204.283C393.051 221.349 379.087 235.313 362.02 235.313H346.505C329.438 235.313 315.475 221.349 315.475 204.283C315.475 198.594 310.82 193.939 305.131 193.939C299.442 193.939 294.788 198.594 294.788 204.283C294.788 221.349 280.824 235.313 263.758 235.313H248.242C231.176 235.313 217.212 221.349 217.212 204.283C217.212 198.594 212.558 193.939 206.869 193.939C201.18 193.939 196.525 198.594 196.525 204.283C196.525 221.349 182.562 235.313 165.495 235.313H149.98C132.913 235.313 118.949 221.349 118.949 204.283C118.949 198.594 114.295 193.939 108.606 193.939C102.917 193.939 98.2626 198.594 98.2626 204.283C98.2626 221.349 84.299 235.313 67.2323 235.313H51.7172C34.6505 235.313 21.204 221.867 20.6869 204.8L39.305 58.4403C40.3394 53.2686 44.4768 49.1312 49.6485 49.1312H462.869C468.04 49.1312 472.695 53.2686 473.212 57.9231L491.313 204.8C490.796 221.867 477.349 235.313 460.283 235.313Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M113.778 318.061H98.2626C92.5737 318.061 87.9192 322.715 87.9192 328.404C87.9192 334.093 92.5737 338.747 98.2626 338.747H113.778C119.467 338.747 124.121 334.093 124.121 328.404C124.121 322.715 119.467 318.061 113.778 318.061Z\"\n        fill={color ? color : '#571C56'}\n      />\n    </svg>\n  );\n};\n\nexport default Brand;\n","import React from 'react';\n\ninterface Icon360Props {\n  color?: string;\n}\n\nexport const Icon360 = ({ color }: Icon360Props): JSX.Element => {\n  return (\n    <svg width=\"512\" height=\"512\" viewBox=\"0 0 512 512\" fill=\"none\">\n      <g clipPath=\"url(#clip0_401:22)\">\n        <path\n          d=\"M41.109 510.616C31.1992 508.63 22.0986 503.756 14.9539 496.608C7.80915 489.459 2.93994 480.356 0.959705 470.445C-0.671866 462.194 -0.245905 453.669 2.19994 445.622C4.64579 437.576 9.03619 430.255 14.9831 424.308C20.9301 418.361 28.2504 413.971 36.2972 411.525C44.3439 409.079 52.8692 408.653 61.1197 410.285C71.0267 412.269 80.1253 417.14 87.2697 424.284C94.4141 431.429 99.285 440.527 101.269 450.434C102.901 458.685 102.475 467.21 100.029 475.257C97.583 483.304 93.1925 490.624 87.2456 496.571C81.2987 502.518 73.9783 506.908 65.9316 509.354C57.8849 511.8 49.3595 512.226 41.109 510.594V510.616ZM450.88 101.72C440.973 99.7355 431.874 94.8647 424.73 87.7202C417.585 80.5758 412.714 71.4772 410.73 61.5702C409.099 53.3197 409.525 44.7944 411.971 36.7477C414.416 28.7009 418.807 21.3806 424.754 15.4336C430.701 9.4867 438.021 5.09629 446.068 2.65044C454.115 0.204595 462.64 -0.221366 470.89 1.41021C480.797 3.39422 489.896 8.2651 497.04 15.4095C504.185 22.554 509.056 31.6525 511.04 41.5595C512.671 49.81 512.245 58.3354 509.799 66.3821C507.354 74.4288 502.963 81.7492 497.016 87.6961C491.069 93.643 483.749 98.0335 475.702 100.479C467.656 102.925 459.13 103.351 450.88 101.72V101.72ZM256.448 128.216C280.917 128.216 303.786 135.128 323.221 147.053L378.368 91.9062C338.994 62.6343 290.406 48.4986 241.474 52.0798C192.542 55.661 146.53 76.7201 111.837 111.413C77.1443 146.105 56.0851 192.118 52.5039 241.05C48.9228 289.982 63.0584 338.569 92.3304 377.944L147.498 322.776C135.629 303.408 129.136 281.227 128.689 258.516C128.243 235.806 133.857 213.386 144.956 193.567C156.054 173.748 172.235 157.245 191.831 145.758C211.428 134.272 233.733 128.216 256.448 128.216V128.216ZM365.397 189.229C380.393 213.702 386.713 242.512 383.339 271.015C379.965 299.518 367.093 326.056 346.797 346.352C326.501 366.647 299.964 379.519 271.461 382.893C242.957 386.268 214.148 379.948 189.674 364.952L134.506 420.098C173.88 449.37 222.468 463.506 271.4 459.925C320.332 456.343 366.344 435.284 401.037 400.592C435.73 365.899 456.789 319.887 460.37 270.955C463.951 222.023 449.816 173.435 420.544 134.061L365.397 189.229Z\"\n          fill={color ? color : '#571C56'}\n        />\n      </g>\n      <defs>\n        <clipPath id=\"clip0_401:22\">\n          <rect width=\"512\" height=\"512\" fill=\"white\" />\n        </clipPath>\n      </defs>\n    </svg>\n  );\n};\n\nexport default Icon360;\n","import React from 'react';\n\ninterface PerformingArtsProps {\n  color?: string;\n}\n\nexport const PerformingArts = ({ color }: PerformingArtsProps): JSX.Element => {\n  return (\n    <svg width=\"512\" height=\"512\" viewBox=\"0 0 512 512\" fill=\"none\">\n      <path\n        d=\"M238.934 206.504C236.943 189.935 228.836 140.798 228.836 140.798C226.774 123.944 201.529 107.66 185.031 112.14C185.031 112.14 141.298 126.149 128.854 129.491C116.338 132.833 71.3958 142.575 71.3958 142.575C54.9692 146.984 41.1736 173.651 47.8581 189.295C47.8581 189.295 65.4225 235.873 71.9647 251.233C76.8714 262.824 94.2225 283.802 100.765 295.18C114.631 319.358 143.503 348.229 170.454 341.046L198.543 333.509C225.494 326.255 236.089 286.86 235.947 258.984C235.947 245.829 240.427 219.02 238.934 206.504ZM115.627 223.216C108.018 225.207 100.623 222.292 99.1292 216.603C97.5647 210.914 102.471 204.656 110.08 202.594C117.689 200.532 125.085 203.518 126.578 209.207C128.143 214.896 123.165 221.154 115.627 223.216ZM185.671 204.443C178.134 206.434 170.738 203.518 169.174 197.829C167.68 192.14 172.587 185.812 180.196 183.82C187.734 181.758 195.129 184.744 196.693 190.434C198.187 196.123 193.28 202.38 185.671 204.443ZM167.396 273.349C150.329 277.972 144.356 311.109 139.805 294.043C135.183 276.976 145.351 259.411 162.419 254.86C179.485 250.238 197.05 260.407 201.6 277.474C206.151 294.54 184.463 268.798 167.396 273.349Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M154.093 166.653C169.279 161.213 182.698 158.256 190.358 160.157C199.267 162.367 206.176 167.484 212.58 175.133L154.093 166.653Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M124.116 174.686C108.244 177.568 95.1448 181.717 89.4616 187.192C82.8519 193.561 79.4264 201.447 77.7048 211.272L124.116 174.686Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M440.605 199.463C440.605 199.463 395.662 189.721 383.218 186.379C370.702 183.037 326.969 168.957 326.969 168.957C310.471 164.548 285.227 180.832 283.165 197.686C283.165 197.686 275.058 246.823 273.067 263.392C271.574 275.908 276.054 302.717 276.054 315.872C275.911 343.748 286.507 383.143 313.458 390.397L341.547 397.935C368.498 405.117 397.369 376.246 411.236 352.068C417.778 340.69 435.129 319.712 440.036 308.121C446.578 292.761 464.142 246.183 464.142 246.183C470.827 230.539 457.031 203.872 440.605 199.463ZM313.885 246.966C315.449 241.277 322.845 238.29 330.382 240.352C337.991 242.343 342.897 248.601 341.405 254.29C339.84 259.979 332.445 262.966 324.907 260.903C317.298 258.913 312.391 252.655 313.885 246.966ZM379.094 325.331C374.471 342.398 356.978 352.566 339.911 347.944C322.845 343.393 312.676 325.829 317.227 308.762C321.849 291.695 327.751 324.833 344.818 329.384C361.956 334.006 383.645 308.264 379.094 325.331ZM411.449 273.064C409.956 278.753 402.56 281.74 394.951 279.749C387.414 277.686 382.436 271.429 384 265.74C385.494 260.051 392.889 257.064 400.498 259.126C408.107 261.118 413.014 267.375 411.449 273.064Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M198.54 333.497L170.445 341.024C143.526 348.238 114.609 319.383 100.771 295.192C94.2453 283.785 76.8978 262.825 71.9456 251.231C65.3941 235.894 47.888 189.311 47.888 189.311C41.1943 173.641 54.96 146.966 71.4194 142.556C71.4194 142.556 116.328 132.823 128.817 129.477C141.306 126.131 185.065 112.105 185.065 112.105C201.524 107.695 226.782 123.913 228.82 140.83C228.82 140.83 236.952 189.934 238.947 206.494C240.455 219.008 235.911 245.828 235.963 258.968C236.074 286.836 225.459 326.283 198.54 333.497Z\"\n        stroke=\"#571C56\"\n        strokeWidth=\"2\"\n        strokeMiterlimit=\"10\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M201.599 277.462C206.172 294.533 184.447 268.806 167.376 273.381C150.305 277.954 144.353 311.097 139.779 294.026C135.205 276.955 145.335 259.409 162.406 254.835C179.477 250.26 197.024 260.391 201.599 277.462Z\"\n        stroke=\"#571C56\"\n        strokeWidth=\"2\"\n        strokeMiterlimit=\"10\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M185.691 204.415C193.277 202.382 198.192 196.122 196.667 190.432C195.142 184.741 187.756 181.777 180.17 183.809C172.583 185.842 167.669 192.103 169.194 197.793C170.718 203.483 178.104 206.448 185.691 204.415Z\"\n        stroke=\"#571C56\"\n        strokeWidth=\"2\"\n        strokeMiterlimit=\"10\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M154.092 166.653C169.279 161.213 182.697 158.256 190.357 160.157C199.266 162.367 206.175 167.484 212.579 175.133\"\n        stroke=\"#571C56\"\n        strokeWidth=\"2\"\n        strokeMiterlimit=\"10\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M115.608 223.189C123.195 221.157 128.109 214.896 126.584 209.206C125.06 203.516 117.674 200.551 110.087 202.583C102.501 204.616 97.5867 210.877 99.1113 216.567C100.636 222.257 108.022 225.222 115.608 223.189Z\"\n        stroke=\"#571C56\"\n        strokeWidth=\"2\"\n        strokeMiterlimit=\"10\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M124.115 174.686C108.243 177.568 95.1441 181.717 89.4609 187.192C82.8511 193.561 79.4257 201.447 77.7041 211.272\"\n        stroke=\"#571C56\"\n        strokeWidth=\"2\"\n        strokeMiterlimit=\"10\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M341.553 397.913L313.459 390.385C286.54 383.172 275.924 343.725 276.036 315.856C276.088 302.714 271.544 275.889 273.053 263.371C275.047 246.814 283.178 197.718 283.178 197.718C285.216 180.8 310.475 164.582 326.934 168.992C326.934 168.992 370.693 183.018 383.182 186.365C395.67 189.711 440.58 199.444 440.58 199.444C457.038 203.854 470.804 230.528 464.11 246.198C464.11 246.198 446.601 292.79 440.049 308.128C435.097 319.72 417.752 340.675 411.227 352.08C397.389 376.272 368.472 405.126 341.553 397.913Z\"\n        stroke=\"#571C56\"\n        strokeWidth=\"2\"\n        strokeMiterlimit=\"10\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M411.452 273.107C412.977 267.417 408.063 261.156 400.476 259.123C392.89 257.091 385.504 260.056 383.979 265.746C382.455 271.436 387.369 277.696 394.955 279.729C402.542 281.762 409.928 278.797 411.452 273.107Z\"\n        stroke=\"#571C56\"\n        strokeWidth=\"2\"\n        strokeMiterlimit=\"10\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M386.482 231.2C402.354 234.082 415.453 238.23 421.136 243.706C427.746 250.075 431.172 257.961 432.893 267.786\"\n        stroke=\"#571C56\"\n        strokeWidth=\"2\"\n        strokeMiterlimit=\"10\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M341.364 254.319C342.888 248.628 337.974 242.368 330.388 240.335C322.801 238.302 315.415 241.267 313.891 246.958C312.366 252.648 317.28 258.908 324.867 260.941C332.453 262.974 339.839 260.009 341.364 254.319Z\"\n        stroke=\"#571C56\"\n        strokeWidth=\"2\"\n        strokeMiterlimit=\"10\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M356.505 223.167C341.319 217.727 327.9 214.77 320.24 216.67C311.331 218.881 304.422 223.998 298.018 231.646\"\n        stroke=\"#571C56\"\n        strokeWidth=\"2\"\n        strokeMiterlimit=\"10\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M317.255 308.766C321.829 291.695 327.781 324.838 344.852 329.412C361.923 333.986 383.649 308.259 379.074 325.33C374.501 342.401 356.954 352.532 339.883 347.958C322.812 343.384 312.682 325.837 317.255 308.766Z\"\n        stroke=\"#571C56\"\n        strokeWidth=\"2\"\n        strokeMiterlimit=\"10\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </svg>\n  );\n};\n\nexport default PerformingArts;\n","import React from 'react';\n\ninterface PerformingMusicProps {\n  color?: string;\n}\n\nexport const PerformingMusic = ({ color }: PerformingMusicProps): JSX.Element => {\n  return (\n    <svg width=\"512\" height=\"512\" viewBox=\"0 0 512 512\" fill=\"none\">\n      <path\n        d=\"M501.801 62.547H471.084V51.116C471.084 45.483 466.518 40.917 460.885 40.917H51.115C45.482 40.917 40.916 45.483 40.916 51.116V62.547H10.199C4.566 62.547 0 67.113 0 72.746V439.253C0 444.886 4.566 449.452 10.199 449.452H40.916V460.883C40.916 466.516 45.482 471.082 51.115 471.082H460.884C466.517 471.082 471.083 466.516 471.083 460.883V449.452H501.8C507.433 449.452 511.999 444.886 511.999 439.253V72.746C512 67.113 507.434 62.547 501.801 62.547ZM40.916 429.054H20.398V429.053V82.946H40.916V429.054ZM450.685 450.684H61.315V61.315H450.686V450.684H450.685ZM491.602 429.053H471.084V82.946H491.602V429.053Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M422.543 316.467V108.099C422.543 105.15 421.267 102.346 419.044 100.409C416.821 98.4721 413.868 97.5951 410.947 97.9961L215.594 125.017C210.55 125.715 206.792 130.027 206.792 135.12V305.609C201.372 301.796 195.039 298.856 187.935 296.955C171.869 292.656 153.662 294.166 136.669 301.205C119.676 308.243 105.735 320.05 97.4129 334.45C88.5839 349.727 87.0169 366.097 92.9999 380.543C98.9829 394.989 111.667 405.456 128.714 410.016C134.713 411.621 141.009 412.416 147.431 412.416C158.206 412.416 169.333 410.176 179.981 405.765C196.974 398.727 210.915 386.92 219.237 372.52C224.821 362.858 227.491 352.76 227.192 342.987V190.407L402.146 166.208V279.08C396.726 275.267 390.393 272.326 383.288 270.426C367.222 266.127 349.015 267.637 332.022 274.676C315.029 281.714 301.088 293.521 292.766 307.921C283.937 323.198 282.37 339.568 288.353 354.014C294.336 368.46 307.02 378.927 324.067 383.487C330.066 385.092 336.362 385.887 342.784 385.887C353.559 385.887 364.686 383.647 375.334 379.236C392.327 372.198 406.268 360.391 414.59 345.991C420.168 336.332 422.839 326.237 422.543 316.467ZM201.574 362.314C195.485 372.851 185.043 381.588 172.173 386.92C163.761 390.405 155.197 392.06 147.214 392.059C130.876 392.058 116.975 385.121 111.845 372.738C108.345 364.288 109.491 354.315 115.073 344.658C121.162 334.121 131.604 325.384 144.474 320.052C152.886 316.567 161.45 314.913 169.433 314.913C185.771 314.913 199.672 321.851 204.802 334.234C208.302 342.684 207.156 352.656 201.574 362.314ZM396.927 335.785C390.838 346.322 380.396 355.059 367.526 360.391C341.899 371.007 314.835 364.644 307.199 346.209C303.699 337.759 304.845 327.786 310.427 318.128C316.516 307.591 326.958 298.854 339.828 293.522C365.457 282.907 392.519 289.269 400.155 307.704C403.655 316.153 402.508 326.126 396.927 335.785ZM402.144 145.616L227.19 169.816V144.006L402.144 119.806V145.616Z\"\n        fill={color ? color : '#571C56'}\n      />\n      <path\n        d=\"M86.693 126.47C81.06 126.47 76.494 131.036 76.494 136.669V270.279C76.494 275.912 81.06 280.478 86.693 280.478C92.326 280.478 96.892 275.912 96.892 270.279V136.669C96.892 131.036 92.326 126.47 86.693 126.47Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M86.693 76.4939C81.06 76.4939 76.494 81.0599 76.494 86.6929V100.972C76.494 106.605 81.06 111.171 86.693 111.171C92.326 111.171 96.892 106.605 96.892 100.972V86.6929C96.892 81.0599 92.326 76.4939 86.693 76.4939Z\"\n        fill=\"black\"\n      />\n    </svg>\n  );\n};\n\nexport default PerformingMusic;\n","import React from 'react';\n\ninterface PersonalDevelopmentProps {\n  color?: string;\n}\n\nexport const PersonalDevelopment = ({ color }: PersonalDevelopmentProps): JSX.Element => {\n  return (\n    <svg width=\"512\" height=\"512\" viewBox=\"0 0 512 512\" fill=\"none\">\n      <g clipPath=\"url(#clip0_401:2)\">\n        <path\n          d=\"M334.859 331.013C335.492 304.719 387.28 271.27 386.989 198.23C386.837 161.496 351.212 100.447 290.711 92.8217C230.218 85.2041 184.955 98.5237 165.158 135.816C145.372 173.102 143.859 205.84 145.387 211.905C146.922 218.009 153.382 229.416 153.382 229.416C153.382 229.416 122.929 276.217 124.835 283.812C126.733 291.437 147.65 295.554 147.65 295.554C147.65 295.554 149.511 300.833 145.697 311.107C141.923 321.363 152.793 333.313 156.03 337.458C159.297 341.634 151.476 354.586 154.14 361.816C156.81 369.046 169.357 377.809 183.822 375.918C198.292 374.01 216.854 370.589 223.316 369.443C237.861 403.695 202.769 421.213 202.769 421.213H387.294C387.277 421.24 333.738 378.216 334.859 331.013ZM270.711 165.417C270.711 150.689 282.691 138.693 297.427 138.693C312.192 138.693 324.175 150.691 324.175 165.417V174.503H314.267V165.417C314.267 156.157 306.719 148.609 297.429 148.609C288.17 148.609 280.637 156.16 280.637 165.417V174.503H270.713V165.417H270.711ZM334.57 231.445C334.57 234.169 332.362 236.4 329.654 236.4H265.28C262.537 236.4 260.303 234.169 260.303 231.445V181.914C260.303 179.206 262.549 176.975 265.28 176.975H329.654C332.377 176.975 334.57 179.206 334.57 181.914V231.445Z\"\n          fill={color ? color : '#571C56'}\n        />\n        <path\n          d=\"M256 0C114.842 0 0 114.842 0 256.005C0 397.156 114.842 511.997 256 511.997C397.156 511.997 512 397.156 512 256.005C512 114.842 397.156 0 256 0ZM256 481.013C131.916 481.013 30.9845 380.06 30.9845 256.005C30.9845 131.931 131.916 30.9845 256 30.9845C380.092 30.9845 481.016 131.916 481.016 256.005C481.016 380.089 380.092 481.013 256 481.013Z\"\n          fill={color ? color : '#571C56'}\n        />\n      </g>\n      <defs>\n        <clipPath id=\"clip0_401:2\">\n          <rect width=\"512\" height=\"511.997\" fill=\"white\" />\n        </clipPath>\n      </defs>\n    </svg>\n  );\n};\n\nexport default PersonalDevelopment;\n","import React from 'react';\n\ninterface PhotographyProps {\n  color?: string;\n}\n\nexport const Photography = ({ color }: PhotographyProps): JSX.Element => {\n  return (\n    <svg width=\"512\" height=\"512\" viewBox=\"0 0 512 512\" fill=\"none\">\n      <path\n        d=\"M68.521 130.678C62.776 130.245 57.747 134.547 57.307 140.301C57.171 142.072 57.103 143.839 57.103 145.554C57.103 151.325 61.781 156.003 67.552 156.003C73.323 156.003 78.001 151.325 78.001 145.553C78.001 144.368 78.049 143.136 78.144 141.892C78.584 136.139 74.276 131.117 68.521 130.678Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M104.641 65.076C99.983 61.667 93.445 62.681 90.038 67.338C81.072 79.593 73.821 91.426 68.488 102.511C65.987 107.711 68.173 113.955 73.374 116.457C74.835 117.159 76.377 117.493 77.896 117.493C81.786 117.493 85.521 115.311 87.319 111.572C92.1 101.635 98.69 90.905 106.903 79.68C110.311 75.022 109.298 68.485 104.641 65.076Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M294.665 238.643C260.096 238.643 231.971 266.766 231.971 301.336C231.971 335.905 260.095 364.029 294.665 364.029C329.235 364.029 357.359 335.905 357.359 301.336C357.359 266.768 329.235 238.643 294.665 238.643ZM294.665 343.131C271.619 343.131 252.869 324.381 252.869 301.336C252.869 278.29 271.619 259.541 294.665 259.541C317.711 259.541 336.461 278.29 336.461 301.336C336.461 324.382 317.712 343.131 294.665 343.131Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M482.747 56.6H159.704C157.728 53.819 155.679 51.011 153.537 48.174C143.29 34.604 133.061 23.054 126.285 15.755C122.442 11.615 119.269 8.363 117.283 6.366C112.683 1.734 110.961 0 106.549 0C103.864 0 101.281 1.034 99.337 2.888C96.049 6.024 18.804 80.398 18.804 141.452C18.804 187.587 53.265 227.088 96.135 232.678V501.551C96.135 507.322 100.814 512 106.584 512H482.747C488.518 512 493.196 507.322 493.196 501.551V67.049C493.196 61.278 488.518 56.6 482.747 56.6ZM106.551 212.462C70.315 212.462 39.702 179.943 39.702 141.452C39.702 99.183 87.931 44.743 106.552 25.302C125.172 44.727 173.396 99.127 173.396 141.452C173.397 179.943 142.785 212.462 106.551 212.462ZM226.538 329.384C224.96 325.578 221.294 323.055 217.176 322.941C205.261 322.61 195.928 313.047 195.928 301.172C195.928 289.297 205.261 279.734 217.176 279.403C221.294 279.288 224.96 276.765 226.538 272.959C228.116 269.153 227.31 264.776 224.481 261.782C216.293 253.116 216.455 239.749 224.847 231.356C228.953 227.251 234.411 224.989 240.213 224.989C245.831 224.989 251.18 227.12 255.275 230.988C258.27 233.818 262.647 234.623 266.452 233.045C270.257 231.467 272.781 227.801 272.895 223.683C273.226 211.768 282.788 202.435 294.664 202.435C306.539 202.435 316.101 211.769 316.433 223.685C316.548 227.803 319.071 231.469 322.877 233.046C326.684 234.624 331.06 233.818 334.054 230.989C338.148 227.121 343.498 224.99 349.116 224.99C354.918 224.99 360.376 227.251 364.48 231.353C372.874 239.75 373.036 253.115 364.847 261.781C362.018 264.776 361.212 269.153 362.79 272.958C364.368 276.763 368.034 279.287 372.151 279.402C384.067 279.733 393.401 289.296 393.401 301.171C393.401 313.046 384.067 322.609 372.151 322.94C368.033 323.055 364.367 325.578 362.79 329.384C361.212 333.19 362.019 337.568 364.847 340.561C373.036 349.226 372.875 362.593 364.483 370.986C360.375 375.092 354.92 377.353 349.118 377.353C349.118 377.353 349.117 377.353 349.116 377.353C343.498 377.352 338.149 375.221 334.055 371.353C331.061 368.523 326.684 367.718 322.878 369.296C319.073 370.873 316.548 374.539 316.433 378.657C316.101 390.573 306.539 399.906 294.664 399.906C282.788 399.906 273.226 390.573 272.895 378.658C272.781 374.54 270.258 370.874 266.452 369.296C265.159 368.76 263.8 368.499 262.452 368.499C259.831 368.499 257.25 369.485 255.274 371.354C251.18 375.223 245.831 377.354 240.213 377.354C234.411 377.354 228.953 375.093 224.848 370.989C216.454 362.592 216.292 349.226 224.48 340.559C227.31 337.567 228.116 333.19 226.538 329.384ZM472.299 491.102H472.298H305.114V419.531C317.986 416.336 328.492 407.357 333.731 395.402C338.587 397.272 343.789 398.251 349.116 398.252C349.118 398.252 349.118 398.252 349.12 398.252C360.502 398.252 371.206 393.817 379.262 385.764C391.632 373.39 394.892 355.526 388.935 340.22C403.973 333.614 414.301 318.675 414.301 301.171C414.301 283.667 403.972 268.728 388.935 262.121C394.892 246.815 391.631 228.95 379.26 216.575C371.207 208.524 360.502 204.091 349.119 204.091C343.791 204.091 338.59 205.07 333.732 206.94C327.135 191.881 312.185 181.535 294.666 181.535C277.146 181.535 262.197 191.881 255.599 206.939C250.742 205.069 245.541 204.09 240.213 204.09C228.83 204.09 218.125 208.523 210.069 216.578C197.701 228.951 194.44 246.815 200.395 262.122C185.358 268.729 175.03 283.668 175.03 301.172C175.03 318.676 185.359 333.615 200.396 340.222C194.44 355.528 197.701 373.393 210.072 385.768C218.126 393.819 228.831 398.253 240.214 398.253C245.541 398.253 250.743 397.274 255.599 395.404C260.837 407.359 271.342 416.338 284.217 419.532V491.102H117.034V232.669C159.872 227.046 194.295 187.563 194.295 141.452C194.295 122.754 187.244 101.328 173.286 77.498H472.299V491.102Z\"\n        fill={color ? color : '#571C56'}\n      />\n    </svg>\n  );\n};\n\nexport default Photography;\n","import React from 'react';\n\nimport Activism from './Activism';\nimport Beauty from './Beauty';\nimport Content from './Content';\nimport Marketing from './Marketing';\nimport Entrepreneurship from './Entrepreneurship';\nimport Fashion from './Fashion';\nimport Film from './Film';\nimport Fitness from './Fitness';\nimport Leadership from './Leadership';\nimport Technology from './Technology';\nimport Brand from './Brand';\nimport Icon360 from './Icon360';\nimport PerformingArts from './PerformingArts';\nimport PerformingMusic from './PerformingMusic';\nimport PersonalDevelopment from './PersonalDevelopment';\nimport Photography from './Photography';\n\ninterface CategoriesIconProps {\n  category: string;\n  color?: string;\n}\n\nexport const CategoriesIcon = ({ category, color }: CategoriesIconProps): JSX.Element => {\n  let categoryIcon = <div />;\n  switch (category) {\n    case 'Activism and Community Action':\n      categoryIcon = <Activism color={color} />;\n      break;\n    case 'Beauty':\n      categoryIcon = <Beauty color={color} />;\n      break;\n    case 'Outstanding Brand':\n      categoryIcon = <Brand color={color} />;\n      break;\n    case 'Content Creation':\n      categoryIcon = <Content color={color} />;\n      break;\n    case 'Digital Marketing':\n      categoryIcon = <Marketing color={color} />;\n      break;\n    case 'Entrepreneurship':\n      categoryIcon = <Entrepreneurship color={color} />;\n      break;\n    case 'Fashion Male':\n    case 'Fashion Female':\n      categoryIcon = <Fashion color={color} />;\n      break;\n    case 'Videography':\n      categoryIcon = <Film color={color} />;\n      break;\n    case 'Photography':\n      categoryIcon = <Photography color={color} />;\n      break;\n    case 'Fitness Male':\n    case 'Fitness Female':\n      categoryIcon = <Fitness color={color} />;\n      break;\n    case 'Leadership':\n      categoryIcon = <Leadership color={color} />;\n      break;\n    case 'Performing arts (expressions)':\n      categoryIcon = <PerformingArts color={color} />;\n      break;\n    case 'Performing arts (music)':\n      categoryIcon = <PerformingMusic color={color} />;\n      break;\n    case 'Technology':\n      categoryIcon = <Technology color={color} />;\n      break;\n    case 'Personal / Career Development':\n      categoryIcon = <PersonalDevelopment color={color} />;\n      break;\n    case 'Icon 360 Male':\n    case 'Icon 360 Female':\n      categoryIcon = <Icon360 color={color} />;\n      break;\n    default:\n      categoryIcon = <Activism color={color} />;\n  }\n  return categoryIcon;\n};\n\nexport default CategoriesIcon;\n","import React from 'react';\n\nexport const Badge = (): JSX.Element => {\n  return (\n    <svg width=\"329\" height=\"329\" viewBox=\"0 0 329 329\" fill=\"none\">\n      <path\n        d=\"M201.793 320.108H201.49C200.675 320.054 199.891 319.776 199.224 319.306C198.556 318.835 198.032 318.19 197.707 317.44L164.118 239.018C163.864 238.479 163.722 237.893 163.7 237.297C163.677 236.701 163.775 236.107 163.987 235.549C164.199 234.992 164.521 234.483 164.934 234.052C165.347 233.622 165.842 233.279 166.39 233.044C166.938 232.809 167.528 232.686 168.124 232.684C168.72 232.681 169.311 232.799 169.861 233.03C170.411 233.26 170.909 233.599 171.326 234.026C171.742 234.453 172.068 234.959 172.285 235.515L202.459 305.925L217.131 281.473C217.612 280.672 218.333 280.043 219.192 279.675C220.05 279.307 221.003 279.219 221.915 279.423L249.747 285.648L222.262 221.488C222.022 220.95 221.891 220.369 221.878 219.78C221.864 219.191 221.968 218.606 222.183 218.057C222.398 217.508 222.719 217.008 223.129 216.585C223.539 216.162 224.029 215.824 224.571 215.592C225.112 215.36 225.694 215.238 226.284 215.232C226.873 215.227 227.457 215.339 228.003 215.562C228.548 215.784 229.044 216.113 229.461 216.529C229.878 216.945 230.209 217.44 230.433 217.985L261.355 290.12C261.678 290.873 261.787 291.7 261.669 292.511C261.552 293.321 261.212 294.084 260.689 294.714C260.166 295.344 259.478 295.817 258.703 296.081C257.928 296.346 257.095 296.39 256.295 296.211L223.115 288.8L205.607 317.952C205.212 318.61 204.652 319.155 203.984 319.533C203.315 319.91 202.56 320.109 201.793 320.108Z\"\n        fill=\"#F2DEEC\"\n      />\n      <path\n        d=\"M127.207 320.108C126.439 320.109 125.685 319.91 125.016 319.532C124.347 319.155 123.788 318.61 123.393 317.952L105.885 288.8L72.7046 296.211C71.9054 296.39 71.0721 296.346 70.2968 296.081C69.5215 295.817 68.8343 295.344 68.3109 294.714C67.7875 294.084 67.4484 293.321 67.3309 292.511C67.2134 291.7 67.3221 290.873 67.6451 290.12L98.5666 217.985C99.0422 216.918 99.9186 216.081 101.006 215.655C102.094 215.229 103.306 215.248 104.379 215.708C105.453 216.169 106.302 217.033 106.744 218.115C107.185 219.196 107.183 220.408 106.738 221.488L79.2401 285.639L107.072 279.414C107.983 279.21 108.936 279.298 109.795 279.666C110.654 280.034 111.375 280.663 111.856 281.464L126.527 305.917L156.702 235.506C156.918 234.95 157.245 234.444 157.661 234.017C158.077 233.59 158.575 233.251 159.125 233.021C159.675 232.79 160.266 232.673 160.863 232.675C161.459 232.678 162.049 232.8 162.597 233.035C163.145 233.27 163.64 233.613 164.053 234.044C164.466 234.474 164.788 234.983 165 235.541C165.212 236.098 165.309 236.692 165.287 237.288C165.264 237.884 165.122 238.47 164.869 239.01L131.293 317.414C130.968 318.163 130.443 318.808 129.776 319.279C129.109 319.749 128.325 320.027 127.51 320.081L127.207 320.108Z\"\n        fill=\"#F2DEEC\"\n      />\n      <path\n        d=\"M264.223 85.629C263.119 85.6272 262.056 85.2152 261.239 84.4731C258.618 82.243 256.342 79.6359 254.486 76.7371C253.572 75.1207 252.846 73.4053 252.321 71.6243C252.147 71.0642 252.085 70.4752 252.14 69.8912C252.194 69.3072 252.364 68.7398 252.638 68.2217C252.913 67.7035 253.288 67.2448 253.741 66.872C254.194 66.4993 254.716 66.2198 255.277 66.0497C255.838 65.8796 256.428 65.8223 257.011 65.881C257.595 65.9397 258.161 66.1133 258.677 66.3917C259.193 66.6702 259.649 67.0481 260.019 67.5036C260.388 67.959 260.664 68.4831 260.83 69.0456C261.154 70.1635 261.601 71.2416 262.164 72.2601C263.576 74.3591 265.271 76.2532 267.201 77.8886C267.867 78.4915 268.334 79.2816 268.541 80.155C268.749 81.0285 268.687 81.9443 268.364 82.7819C268.041 83.6196 267.473 84.34 266.732 84.8482C265.992 85.3563 265.116 85.6286 264.218 85.629H264.223Z\"\n        fill=\"#F2DEEC\"\n      />\n      <path\n        d=\"M137.229 248.342C135.667 248.347 134.112 248.152 132.601 247.759C125.723 245.928 121.166 240.339 116.76 234.928C114.385 231.591 111.468 228.674 108.13 226.299C106.104 225.248 103.935 224.499 101.692 224.076C99.8828 223.68 97.9933 223.369 96.1038 223.058C89.2881 221.933 82.2457 220.768 77.3152 215.797C72.3846 210.827 71.2065 203.825 70.0816 197C69.6791 192.846 68.5835 188.788 66.8405 184.996C64.4553 181.666 61.5348 178.755 58.1976 176.38C52.7913 171.969 47.1939 167.408 45.3666 160.53C44.3416 153.842 45.4377 147.001 48.501 140.968C50.2716 137.065 51.3704 132.89 51.751 128.621C51.3698 124.354 50.271 120.181 48.501 116.279C45.4465 110.244 44.3582 103.403 45.3888 96.7172C47.2161 89.8394 52.8091 85.2778 58.2198 80.8674C61.5607 78.4919 64.4831 75.5771 66.8672 72.2423C68.609 68.4495 69.7044 64.3923 70.1083 60.2383C70.4754 53.3719 72.9884 46.794 77.293 41.4319C82.6582 37.1147 89.2449 34.5936 96.1215 34.225C100.283 33.8208 104.348 32.7239 108.148 30.9795C111.476 28.5957 114.386 25.6766 116.76 22.341C121.174 16.9303 125.736 11.3328 132.614 9.50557C139.207 7.72719 145.814 10.2169 152.207 12.6177C156.092 14.3878 160.248 15.4882 164.5 15.8722C168.76 15.4892 172.924 14.3873 176.815 12.6133C182.862 9.53779 189.725 8.4487 196.427 9.50112C199.803 10.4805 202.885 12.2762 205.403 14.7296C205.833 15.1242 206.182 15.5998 206.428 16.1291C206.675 16.6584 206.814 17.2311 206.84 17.8144C206.865 18.3978 206.775 18.9804 206.575 19.529C206.375 20.0776 206.069 20.5814 205.674 21.0117C205.279 21.442 204.804 21.7903 204.275 22.0368C203.745 22.2833 203.173 22.4232 202.589 22.4483C201.411 22.4992 200.261 22.08 199.392 21.2829C197.93 19.8017 196.127 18.7011 194.141 18.0773C189.245 17.6772 184.336 18.6665 179.977 20.9316C175.09 23.1283 169.847 24.4265 164.5 24.7641C159.159 24.4244 153.923 23.1262 149.042 20.9316C144.688 18.6678 139.785 17.677 134.895 18.0729C130.271 20.2128 126.36 23.6374 123.629 27.9385C120.616 32.1489 116.874 35.7867 112.58 38.6799C107.864 41.0088 102.769 42.4725 97.5354 43.0013C92.5243 43.2271 87.6789 44.8638 83.5573 47.7229C80.7124 51.8418 79.0839 56.678 78.8579 61.6787C78.3283 66.9084 76.8662 72.0009 74.5409 76.7149C71.6506 81.0088 68.0195 84.7543 63.8173 87.7765C59.5185 90.4994 56.095 94.4029 53.9562 99.0202C53.5715 103.911 54.5633 108.811 56.8194 113.167C59.0092 118.056 60.3042 123.298 60.6429 128.644C60.3037 133.991 59.0087 139.234 56.8194 144.124C54.5628 148.48 53.571 153.381 53.9562 158.271C56.0988 162.886 59.5215 166.789 63.8173 169.515C68.0166 172.532 71.6461 176.272 74.5365 180.559C76.8566 185.261 78.3185 190.339 78.8535 195.555C79.0767 200.567 80.7255 205.412 83.6062 209.52C87.7013 212.411 92.5406 214.065 97.5487 214.286C99.5983 214.628 101.643 214.966 103.613 215.397C106.732 216.005 109.742 217.08 112.54 218.585C116.862 221.47 120.628 225.112 123.655 229.335C126.372 233.628 130.268 237.047 134.877 239.183C139.766 239.571 144.665 238.581 149.019 236.324C152.578 234.863 156.26 233.727 160.023 232.928C162.981 232.363 166.019 232.363 168.977 232.928C172.74 233.727 176.423 234.863 179.981 236.324C184.341 238.572 189.241 239.562 194.132 239.183C198.738 237.043 202.631 233.625 205.35 229.335C208.369 225.119 212.123 221.482 216.433 218.598C219.237 217.088 222.253 216.01 225.379 215.402C227.361 214.957 229.407 214.628 231.447 214.29C236.464 214.056 241.309 212.396 245.416 209.506C248.274 205.402 249.908 200.57 250.129 195.573C250.66 190.348 252.122 185.26 254.446 180.55C257.336 176.257 260.967 172.513 265.17 169.493C269.467 166.766 272.89 162.862 275.031 158.245C275.416 153.356 274.424 148.457 272.168 144.102C269.978 139.212 268.683 133.969 268.344 128.621C268.687 123.229 270 117.942 272.221 113.016C272.701 111.749 273.181 110.486 273.617 109.233C274.007 108.119 274.824 107.207 275.887 106.696C276.95 106.185 278.173 106.117 279.286 106.507C280.399 106.898 281.311 107.714 281.822 108.777C282.333 109.84 282.401 111.063 282.011 112.176C281.566 113.51 281.042 114.843 280.535 116.177C278.737 120.11 277.622 124.319 277.236 128.626C277.617 132.895 278.715 137.069 280.486 140.972C283.542 147.007 284.631 153.849 283.598 160.534C281.771 167.417 276.173 171.978 270.767 176.389C267.427 178.765 264.505 181.68 262.12 185.014C260.378 188.806 259.282 192.864 258.879 197.018C257.763 203.825 256.611 210.867 251.681 215.797C246.327 220.138 239.739 222.674 232.857 223.044C230.967 223.356 229.082 223.667 227.264 224.062C225.016 224.485 222.843 225.234 220.813 226.285C217.483 228.664 214.573 231.582 212.205 234.919C207.799 240.33 203.242 245.919 196.373 247.746C189.687 248.772 182.848 247.684 176.811 244.634C173.754 243.372 170.593 242.379 167.363 241.664C165.446 241.286 163.474 241.286 161.557 241.664C158.328 242.379 155.167 243.372 152.109 244.634C147.407 246.739 142.369 247.994 137.229 248.342Z\"\n        fill=\"#F2DEEC\"\n      />\n      <path\n        d=\"M242.126 45.2597C241.609 45.2595 241.096 45.1754 240.606 45.0107C237.556 44.0644 234.433 43.3729 231.269 42.9434C229.442 42.641 227.624 42.3343 225.859 41.9608C225.282 41.8456 224.735 41.6172 224.247 41.289C223.76 40.9608 223.342 40.5392 223.019 40.0486C222.695 39.5581 222.472 39.0082 222.363 38.4309C222.253 37.8536 222.259 37.2603 222.38 36.6853C222.501 36.1103 222.735 35.565 223.068 35.0809C223.401 34.5968 223.827 34.1836 224.321 33.865C224.815 33.5465 225.367 33.3291 225.945 33.2252C226.523 33.1214 227.117 33.1332 227.69 33.2601C229.331 33.6113 231.029 33.8914 232.732 34.176C236.35 34.6746 239.919 35.4778 243.402 36.5768C244.41 36.897 245.271 37.5658 245.83 38.4632C246.389 39.3607 246.61 40.428 246.453 41.4736C246.296 42.5192 245.772 43.4747 244.974 44.1686C244.176 44.8625 243.157 45.2493 242.1 45.2597H242.126Z\"\n        fill=\"#F2DEEC\"\n      />\n      <path\n        d=\"M164.5 210.08C148.545 210.08 132.949 205.349 119.683 196.485C106.418 187.621 96.0782 175.022 89.9728 160.282C83.8674 145.541 82.2702 129.322 85.3831 113.674C88.496 98.0256 96.1793 83.6521 107.461 72.3707C118.743 61.0894 133.117 53.4069 148.765 50.2949C164.414 47.1828 180.633 48.7809 195.373 54.8871C210.113 60.9933 222.711 71.3333 231.575 84.5996C240.438 97.8658 245.168 113.462 245.167 129.417C245.141 150.803 236.634 171.306 221.512 186.427C206.389 201.549 185.886 210.055 164.5 210.08ZM164.5 57.6417C150.304 57.6417 136.427 61.8513 124.624 69.7381C112.82 77.6248 103.621 88.8346 98.1883 101.95C92.7558 115.065 91.3344 129.497 94.1038 143.42C96.8733 157.343 103.709 170.132 113.747 180.17C123.785 190.208 136.574 197.044 150.497 199.813C164.42 202.583 178.852 201.161 191.967 195.729C205.083 190.296 216.292 181.097 224.179 169.293C232.066 157.49 236.275 143.613 236.275 129.417C236.253 110.388 228.684 92.1446 215.228 78.6889C201.773 65.2333 183.529 57.6641 164.5 57.6417Z\"\n        fill=\"#F2DEEC\"\n      />\n      <path\n        d=\"M189.233 169.497C188.511 169.498 187.8 169.322 187.161 168.986L164.5 157.075L141.826 168.986C141.092 169.372 140.264 169.545 139.437 169.485C138.609 169.425 137.815 169.135 137.144 168.648C136.473 168.16 135.951 167.495 135.639 166.726C135.326 165.958 135.235 165.118 135.375 164.3L139.701 139.065L121.374 121.197C120.78 120.618 120.359 119.884 120.16 119.078C119.961 118.273 119.992 117.428 120.248 116.638C120.504 115.849 120.976 115.147 121.611 114.613C122.245 114.078 123.016 113.731 123.838 113.612L149.179 109.931L160.499 86.9761C160.908 86.2819 161.491 85.7064 162.19 85.3066C162.889 84.9068 163.681 84.6965 164.487 84.6965C165.292 84.6965 166.084 84.9068 166.784 85.3066C167.483 85.7064 168.066 86.2819 168.475 86.9761L179.803 109.931L205.145 113.612C205.968 113.728 206.741 114.073 207.378 114.607C208.015 115.14 208.489 115.842 208.747 116.632C209.006 117.421 209.037 118.268 208.839 119.074C208.641 119.881 208.221 120.616 207.626 121.197L189.295 139.065L193.621 164.3C193.73 164.938 193.699 165.592 193.53 166.217C193.36 166.841 193.056 167.421 192.639 167.916C192.222 168.411 191.702 168.809 191.115 169.082C190.528 169.355 189.889 169.497 189.242 169.497H189.233ZM164.5 147.605C165.22 147.605 165.93 147.778 166.568 148.112L183.324 156.942L180.123 138.269C180.002 137.558 180.055 136.829 180.278 136.144C180.501 135.458 180.887 134.837 181.404 134.334L194.959 121.121L176.224 118.4C175.511 118.296 174.833 118.021 174.25 117.597C173.667 117.174 173.195 116.615 172.876 115.968L164.5 98.9846L156.124 115.964C155.805 116.61 155.333 117.169 154.75 117.593C154.167 118.017 153.49 118.292 152.776 118.396L134.041 121.117L147.606 134.33C148.122 134.833 148.508 135.454 148.731 136.139C148.954 136.825 149.008 137.554 148.886 138.265L145.685 156.937L162.442 148.126C163.076 147.789 163.782 147.61 164.5 147.605Z\"\n        fill=\"#F2DEEC\"\n      />\n    </svg>\n  );\n};\n\nexport default Badge;\n","import React from 'react';\n\ninterface LabelProps {\n  children: React.ReactNode;\n}\n\nconst Label = (props: LabelProps): JSX.Element => {\n  return <label className=\"label\">{props.children}</label>;\n};\n\nexport default Label;\n","import React from 'react';\n\ninterface PasswordProps {\n  type: string;\n}\n\n// eslint-disable-next-line no-undef\nconst Password = (props: PasswordProps): JSX.Element => {\n  return (\n    <svg width=\"22\" height=\"22\" viewBox=\"0 0 22 22\" fill=\"none\">\n      <path\n        d=\"M19.7062 10.2235L20.0836 9.89548L20.0813 9.89295L19.7062 10.2235ZM2.29385 10.2235L1.91869 9.89294L1.91647 9.89549L2.29385 10.2235ZM2.20001 10.4745H2.70001H2.20001ZM2.29385 10.7255L1.91647 11.0535L1.91869 11.0561L2.29385 10.7255ZM19.7062 10.7255L20.0813 11.0561L20.0835 11.0535L19.7062 10.7255ZM13.1786 10.4745C13.1786 11.6777 12.2032 12.6531 11 12.6531V13.6531C12.7555 13.6531 14.1786 12.23 14.1786 10.4745H13.1786ZM11 12.6531C9.7968 12.6531 8.82141 11.6777 8.82141 10.4745H7.82141C7.82141 12.23 9.24451 13.6531 11 13.6531V12.6531ZM8.82141 10.4745C8.82141 9.27131 9.7968 8.29593 11 8.29593V7.29593C9.24451 7.29593 7.82141 8.71903 7.82141 10.4745H8.82141ZM11 8.29593C12.2032 8.29593 13.1786 9.27131 13.1786 10.4745H14.1786C14.1786 8.71903 12.7555 7.29593 11 7.29593V8.29593ZM20.0813 9.89295C19.6215 9.37105 18.4785 8.15745 16.8989 7.07096C15.3242 5.98784 13.2706 5 11 5V6C12.9861 6 14.8405 6.8688 16.3322 7.89487C17.819 8.91758 18.9008 10.0657 19.331 10.554L20.0813 9.89295ZM11 5C8.72941 5 6.67578 5.98784 5.1011 7.07096C3.52154 8.15745 2.37852 9.37105 1.91869 9.89295L2.66901 10.554C3.09924 10.0657 4.18098 8.91758 5.66782 7.89487C7.15955 6.8688 9.01397 6 11 6V5ZM1.91647 9.89549C1.77688 10.0561 1.70001 10.2617 1.70001 10.4745H2.70001C2.70001 10.5028 2.68979 10.5301 2.67123 10.5515L1.91647 9.89549ZM1.70001 10.4745C1.70001 10.6873 1.77688 10.8929 1.91647 11.0535L2.67123 10.3975C2.68979 10.4189 2.70001 10.4462 2.70001 10.4745H1.70001ZM1.91869 11.0561C2.37852 11.578 3.52154 12.7916 5.1011 13.8781C6.67578 14.9612 8.72941 15.949 11 15.949V14.949C9.01397 14.949 7.15955 14.0802 5.66782 13.0541C4.18098 12.0314 3.09924 10.8833 2.66901 10.395L1.91869 11.0561ZM11 15.949C13.2706 15.949 15.3242 14.9612 16.8989 13.8781C18.4785 12.7916 19.6215 11.578 20.0813 11.0561L19.331 10.395C18.9008 10.8833 17.819 12.0314 16.3322 13.0541C14.8405 14.0802 12.9861 14.949 11 14.949V15.949ZM20.0835 11.0535C20.2231 10.8929 20.3 10.6873 20.3 10.4745H19.3C19.3 10.4462 19.3102 10.4189 19.3288 10.3975L20.0835 11.0535ZM20.3 10.4745C20.3 10.2617 20.2231 10.0561 20.0835 9.89549L19.3288 10.5515C19.3102 10.5301 19.3 10.5028 19.3 10.4745H20.3Z\"\n        fill=\"#345948\"\n      />\n      {props.type === 'close' ? (\n        <line x1=\"6.54813\" y1=\"19.786\" x2=\"15.5481\" y2=\"0.785957\" stroke=\"#345948\" />\n      ) : null}\n    </svg>\n  );\n};\n\nPassword.defaultProps = {\n  type: 'open',\n};\n\nexport default Password;\n","import React from 'react';\n\n// eslint-disable-next-line no-undef\nconst InputSuccess = (): JSX.Element => {\n  return (\n    <svg width=\"18\" height=\"18\" viewBox=\"0 0 18 18\" fill=\"none\">\n      <circle cx=\"9.00002\" cy=\"9.00002\" r=\"7.6\" stroke=\"#41B661\" />\n      <path\n        d=\"M13.0022 5.922L7.23831 11.9716L5.11206 9.84535\"\n        stroke=\"#41B661\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </svg>\n  );\n};\n\nexport default InputSuccess;\n","import React from 'react';\n\n// eslint-disable-next-line no-undef\nconst inputCancel = (): JSX.Element => {\n  return (\n    <svg width=\"18\" height=\"18\" viewBox=\"0 0 18 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path\n        d=\"M12.2169 6.49023C12.4122 6.29497 12.4122 5.97838 12.2169 5.78312C12.0217 5.58786 11.7051 5.58786 11.5098 5.78312L12.2169 6.49023ZM5.78312 11.5098C5.58786 11.7051 5.58786 12.0217 5.78312 12.2169C5.97838 12.4122 6.29497 12.4122 6.49023 12.2169L5.78312 11.5098ZM11.5098 12.2169C11.7051 12.4122 12.0217 12.4122 12.2169 12.2169C12.4122 12.0217 12.4122 11.7051 12.2169 11.5098L11.5098 12.2169ZM6.49023 5.78312C6.29497 5.58786 5.97838 5.58786 5.78312 5.78312C5.58786 5.97838 5.58786 6.29497 5.78312 6.49023L6.49023 5.78312ZM16.6 9.00002C16.6 13.1974 13.1974 16.6 9.00002 16.6V17.6C13.7497 17.6 17.6 13.7497 17.6 9.00002H16.6ZM9.00002 16.6C4.80266 16.6 1.40002 13.1974 1.40002 9.00002H0.400024C0.400024 13.7497 4.25038 17.6 9.00002 17.6V16.6ZM1.40002 9.00002C1.40002 4.80266 4.80266 1.40002 9.00002 1.40002V0.400024C4.25038 0.400024 0.400024 4.25038 0.400024 9.00002H1.40002ZM9.00002 1.40002C13.1974 1.40002 16.6 4.80266 16.6 9.00002H17.6C17.6 4.25038 13.7497 0.400024 9.00002 0.400024V1.40002ZM11.5098 5.78312L5.78312 11.5098L6.49023 12.2169L12.2169 6.49023L11.5098 5.78312ZM12.2169 11.5098L6.49023 5.78312L5.78312 6.49023L11.5098 12.2169L12.2169 11.5098Z\"\n        fill=\"#918DAB\"\n      />\n    </svg>\n  );\n};\n\nexport default inputCancel;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React from 'react';\n\nimport Label from '../Label';\nimport Password from 'components/Icons/Input/Password';\nimport InputSuccess from 'components/Icons/Input/InputSucess';\nimport InputCancel from 'components/Icons/Input/InputCancel';\n\ninterface InputProps {\n  attributes: {\n    [key: string]: any;\n  };\n  hasError: boolean;\n  focused: boolean;\n  label?: string;\n  message?: string;\n  messageClassName?: string;\n  appendItem?: any;\n  prependItem?: any;\n  handleAppendItemClick?: () => void;\n  isPasswordVisible?: boolean;\n}\n\nconst Input = (props: InputProps): JSX.Element => {\n  let appendedItem,\n    inputClassName = 'input';\n  const messageClassName = props.messageClassName\n    ? props.messageClassName + ' input__message'\n    : 'input__message';\n\n  props.hasError &&\n    props.attributes.value !== '' &&\n    !props.focused &&\n    (inputClassName += ' input--invalid');\n  props.focused && (inputClassName += ' input--focus');\n\n  switch (props.appendItem) {\n    case 'password':\n      appendedItem = (\n        <div className=\"input__icon\" onClick={props.handleAppendItemClick}>\n          {props.isPasswordVisible ? <Password type=\"close\" /> : <Password />}\n        </div>\n      );\n      break;\n    case 'success':\n      appendedItem = (\n        <div className=\"input__icon\">\n          <InputSuccess />\n        </div>\n      );\n      break;\n    case 'cancel':\n      appendedItem = (\n        <div className=\"input__icon\" onClick={props.handleAppendItemClick}>\n          <InputCancel />\n        </div>\n      );\n      break;\n    default:\n      props.appendItem &&\n        (appendedItem = (\n          <div className=\"input__icon\" onClick={props.handleAppendItemClick}>\n            {props.appendItem}\n          </div>\n        ));\n  }\n  return (\n    <div\n      className={\n        props.attributes.theme\n          ? `input__group input__theme--${props.attributes.theme}`\n          : 'input__group'\n      }>\n      {props.label && (\n        <Label>\n          {props.label}\n          {props.attributes.required && ' *'}\n        </Label>\n      )}\n      <div className={inputClassName}>\n        {props.prependItem && <div className=\"input__prepend\">{props.prependItem}</div>}\n        <input className=\"input__item\" {...props.attributes} />\n        {props.appendItem && <div className=\"input__append\">{appendedItem}</div>}\n      </div>\n      {props.message && <small className={messageClassName}>{props.message}</small>}\n    </div>\n  );\n};\n\nInput.defaultProps = {\n  attributes: {\n    required: false,\n    value: '',\n    theme: 'default',\n    onChange: () => null,\n    onFocus: () => null,\n    onBlur: () => null,\n  },\n  appendedItem: null,\n  handleAppendItemClick: () => null,\n};\n\nexport default Input;\n","import React from 'react';\n\ninterface ModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  children: React.ReactNode;\n}\n\nexport const Modal = ({ isOpen, onClose, children }: ModalProps): JSX.Element => {\n  return (\n    <>\n      <div\n        className={`Modal -backdrop ${isOpen ? 'Menu -backdrop--open' : 'Menu -backdrop--closed'}`}\n        onClick={onClose}></div>\n      <div className={`Modal -body ${isOpen ? '-body--open' : '-body--closed'}`}>{children}</div>\n    </>\n  );\n};\n\nexport default Modal;\n","import React, { ReactNode } from 'react';\n\ninterface ButtonProps {\n  children: ReactNode;\n  disabled?: boolean;\n  image?: string;\n  className?: string;\n  style?: React.CSSProperties;\n  type?: 'button' | 'submit';\n  onClick?: () => void;\n}\n\nexport const Button = ({\n  children,\n  disabled,\n  type,\n  image,\n  className,\n  style,\n  onClick,\n}: ButtonProps): JSX.Element => {\n  return (\n    <button\n      className={`Button ${className}`}\n      disabled={disabled}\n      type={type}\n      onClick={onClick}\n      style={{ backgroundImage: `url(${image})`, ...style }}>\n      {children}\n    </button>\n  );\n};\n\nButton.defaultProps = {\n  disabled: false,\n  type: 'submit',\n};\n\nexport default Button;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps, Link } from 'react-router-dom';\nimport axios from 'shared/axios';\n\nimport * as urls from 'shared/routes.json';\nimport { RootState, persistor } from 'store';\nimport { fetchCategories, clearVotes } from 'store/actions';\nimport { IinitialState } from 'store/reducers/vote';\nimport { checkValidity } from '../../shared/validations';\nimport { classSet, votingEnded } from 'shared/config';\n\nimport WingsAwardLogo from 'assets/images/wings-logo.svg';\nimport CategoryIcon from 'components/Icons/Categories';\nimport BadgeIcon from 'components/Icons/Badge';\nimport VoteIcon from 'components/Icons/VoteEnded/Vote';\nimport Input from '../../components/Input';\nimport Modal from 'components/Modal';\nimport Button from 'components/Button';\nimport categoryInterface from 'types/category';\n\ninterface HomeState {\n  categories: categoryInterface[];\n  isModalOpen: boolean;\n  isVotedOpen: boolean;\n  voteForm: {\n    email: {\n      value: string;\n      valid: boolean;\n      focused: boolean;\n      messageClassName: string;\n    };\n  };\n  formIsValid: boolean;\n  loading: boolean;\n  endedAnimation: {\n    bg: boolean;\n    circle1: boolean;\n    circle2: boolean;\n    circle3: boolean;\n    text: boolean;\n  };\n}\n\ninterface HomeProps extends RouteComponentProps {\n  vote: IinitialState;\n  fetchCategories: () => Promise<categoryInterface[]>;\n  clearVotes: () => void;\n}\n\nexport class Home extends Component<HomeProps, HomeState> {\n  state = {\n    categories: [],\n    isModalOpen: false,\n    isVotedOpen: false,\n    voteForm: {\n      email: {\n        value: '',\n        valid: false,\n        focused: false,\n        messageClassName: 'none',\n      },\n    },\n    formIsValid: false,\n    loading: false,\n    endedAnimation: {\n      bg: false,\n      circle1: false,\n      circle2: false,\n      circle3: false,\n      text: false,\n    },\n  };\n\n  async componentDidMount(): Promise<void> {\n    const { fetchCategories, vote } = this.props;\n    let { categories } = vote;\n    const curClassSet = classSet ? classSet : '17th';\n\n    if (window.localStorage.getItem(curClassSet) == 'true') {\n      if (categories && categories.length > 0) this.setState({ categories });\n      else {\n        categories = await fetchCategories();\n        this.setState({ categories });\n      }\n    } else {\n      await persistor.purge();\n      categories = await fetchCategories();\n      this.setState({ categories });\n      window.localStorage.setItem(curClassSet, 'true');\n    }\n\n    setTimeout(() => {\n      this.toggleAnimation('bg');\n    }, 100);\n\n    setTimeout(() => {\n      this.toggleAnimation('circle1');\n    }, 1200);\n\n    setTimeout(() => {\n      this.toggleAnimation('circle2');\n    }, 1400);\n\n    setTimeout(() => {\n      this.toggleAnimation('circle3');\n    }, 1600);\n\n    setTimeout(() => {\n      this.toggleAnimation('text');\n    }, 1800);\n  }\n\n  toggleModal = (): void => {\n    this.setState({ isModalOpen: votingEnded ? this.state.isModalOpen : !this.state.isModalOpen });\n  };\n\n  toggleVoted = (): void => {\n    this.setState({ isVotedOpen: !this.state.isVotedOpen });\n  };\n\n  toggleLoading = (): void => {\n    this.setState({ loading: !this.state.loading });\n  };\n\n  toggleAnimation = (name: 'bg' | 'circle1' | 'circle2' | 'circle3' | 'text'): void => {\n    this.setState({\n      ...this.state,\n      endedAnimation: {\n        ...this.state.endedAnimation,\n        [name]: !this.state.endedAnimation[name],\n      },\n    });\n  };\n\n  handleInputOnChange = (\n    event: {\n      target: {\n        value: string;\n      };\n    },\n    elementId: 'email',\n    validations: { [key: string]: string | number | boolean }\n  ): void => {\n    const value = event.target.value;\n\n    const updatedFormElement = {\n      ...this.state.voteForm[elementId],\n      value,\n      valid: checkValidity(value, validations),\n      messageClassName:\n        !checkValidity(value, validations) && value !== '' ? 'input__message--error' : 'none',\n    };\n\n    const updatedForm = {\n      ...this.state.voteForm,\n      [elementId]: updatedFormElement,\n    };\n\n    let formIsValid = true;\n    for (const elementId in updatedForm) {\n      formIsValid = updatedForm[elementId as 'email'].valid && formIsValid;\n    }\n\n    this.setState({\n      voteForm: updatedForm,\n      formIsValid: formIsValid,\n    });\n  };\n\n  handleInputFocus = (name: 'email', updatedState: { focused: boolean }): void => {\n    const updatedNameObject = {\n      ...this.state.voteForm[name],\n      ...updatedState,\n    };\n\n    const updatedForm = {\n      ...this.state.voteForm,\n      [name]: updatedNameObject,\n    };\n\n    this.setState({\n      voteForm: updatedForm,\n    });\n  };\n\n  handleOnSubmit = async (e: { preventDefault: () => void }): Promise<void> => {\n    e.preventDefault();\n    const { voteForm } = this.state;\n    const { vote, clearVotes } = this.props;\n    const { votes } = vote;\n\n    if (votes && votes.length === 0) {\n      window.alert('You have to nominate people to be able to finish the voting process');\n      return;\n    }\n\n    if (window.confirm('Submitting votes... Click ok to continue')) {\n      if (voteForm.email.valid && voteForm.email.value !== '') {\n        const email = voteForm.email.value;\n\n        if (email.indexOf('+') !== -1)\n          window.alert(`Please use a covenant university email to vote`);\n        else if (email.split('.').length > 5)\n          window.alert(`Please use a covenant university email to vote`);\n        else if (/\\d/.test(email)) window.alert(`Please use a covenant university email to vote`);\n        else if (email.split('@')[1] !== 'stu.cu.edu.ng')\n          window.alert('Please use a covenant university email to vote');\n        else {\n          this.toggleLoading();\n          const voteData = {\n            email,\n            votes,\n          };\n          try {\n            await axios.post('/vote/v1/', voteData);\n            this.toggleLoading();\n            this.toggleVoted();\n            clearVotes();\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          } catch (err: any) {\n            this.toggleLoading();\n            const errorData = err.response.data;\n            if (errorData && errorData.data && errorData.data.errors) {\n              window.alert(errorData.data.errors[0].msg);\n            } else {\n              window.alert('An error occured!');\n            }\n            console.log(err.response.data.data.errors);\n          }\n        }\n      } else {\n        window.alert('Invalid form submission!');\n      }\n    }\n  };\n\n  render(): JSX.Element {\n    const { categories, isModalOpen, isVotedOpen, loading, voteForm, formIsValid, endedAnimation } =\n      this.state;\n    const { history, vote } = this.props;\n    const { votes } = vote;\n    const { bg, circle1, circle2, circle3, text } = endedAnimation;\n\n    return (\n      <div\n        className=\"Home -body\"\n        style={{\n          position: votingEnded ? 'fixed' : 'relative',\n          maxHeight: votingEnded ? '100%' : 'fit-content',\n          overflow: votingEnded ? 'hidden' : 'scroll',\n        }}>\n        <div className=\"Home -body-inner\">\n          <div className=\"Home -logo\">\n            <img src={WingsAwardLogo} alt=\"Wings Award\" />\n          </div>\n\n          <div className=\"Home -top-row\">\n            <div className=\"Home -title\">Award Categories</div>\n            <Button className=\"Button-brand\" onClick={() => this.toggleModal()}>\n              {votingEnded ? 'Voting has Closed!' : 'Submit Votes'}\n            </Button>\n          </div>\n\n          <div className=\"Home -categories\">\n            {categories && categories.length > 0 ? (\n              categories.map((category: categoryInterface, idx: number) => {\n                const alreadyVoted = votes.find(vote => vote.category === category._id);\n\n                return (\n                  <div\n                    className={`Home -category ${alreadyVoted && '-category--voted'}`}\n                    key={category._id}\n                    onClick={() =>\n                      history.push({\n                        pathname: `${urls.Category}`,\n                        state: {\n                          category,\n                          prev: categories[idx - 1] ? categories[idx - 1] : null,\n                          next: categories[idx + 1] ? categories[idx + 1] : null,\n                        },\n                      })\n                    }>\n                    <div className=\"Home -category-icon\">\n                      <CategoryIcon category={category.name} />\n                    </div>\n\n                    <div className=\"Home -category-title\">{category.name}</div>\n                  </div>\n                );\n              })\n            ) : (\n              <div className=\"Home -categories-loading\">Loading...</div>\n            )}\n          </div>\n\n          <div className=\"Home -footer\">\n            Designed and developed by{' '}\n            <a href=\"https://idarrel.netlify.app/\" rel=\"noopener noreferrer\" target=\"_blank\">\n              Darrel Idiagbor\n            </a>\n          </div>\n        </div>\n\n        <Modal isOpen={isModalOpen} onClose={() => this.toggleModal()}>\n          <div className=\"Home -modal\">\n            <div className=\"Home -modal-top\">\n              <h2>Final Vote -- Wings Award 2022</h2>\n              <small>\n                Note: Please reconfirm your choices below as you cannot modify or revote beyond this\n                point.\n              </small>\n            </div>\n\n            <div className=\"Home -modal-categories\">\n              {votes &&\n                votes.map(vote => {\n                  const category = categories.find(\n                    (cat: categoryInterface) => cat._id === vote.category\n                  ) as unknown as categoryInterface;\n\n                  const nominee =\n                    category && category?.nominees.find(nominee => nominee._id === vote.nominee);\n\n                  return (\n                    <div className=\"Home -modal-category\" key={vote.category}>\n                      <div className=\"Home -modal-category-icon\">\n                        <CategoryIcon color=\"#FE77FC\" category={category && category.name} />\n                      </div>\n                      <div className=\"Home -modal-category-body\">\n                        <div className=\"Home -modal-category-title\">\n                          {category && category.name}\n                        </div>\n                        <br />\n                        <div className=\"Home -modal-category-nominated\">\n                          <b>Nominated:</b> {nominee && nominee?.name}\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n            </div>\n\n            <form name=\"SubmitVote\" onSubmit={this.handleOnSubmit}>\n              <Input\n                label=\"Your Email\"\n                attributes={{\n                  type: 'email',\n                  name: 'email',\n                  placeholder: 'you@example.com',\n                  required: true,\n                  theme: 'default',\n                  value: voteForm.email.value,\n                  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                  onChange: (event: any) =>\n                    this.handleInputOnChange(event, 'email', {\n                      required: true,\n                      isEmail: true,\n                    }),\n                  onFocus: () =>\n                    this.handleInputFocus('email', {\n                      focused: true,\n                    }),\n                  onBlur: () =>\n                    this.handleInputFocus('email', {\n                      focused: false,\n                    }),\n                }}\n                hasError={!voteForm.email.valid}\n                focused={voteForm.email.focused}\n                message={\n                  !voteForm.email.valid && !voteForm.email.focused && voteForm.email.value !== ''\n                    ? 'Your email is required and must be valid'\n                    : ''\n                }\n                messageClassName={voteForm.email.messageClassName}\n              />\n\n              <div className=\"Home -modal-categories-btn\">\n                <Button\n                  className=\"Button-brand\"\n                  disabled={!formIsValid}\n                  style={{ backgroundColor: '#ff50e828' }}>\n                  {loading ? 'Submitting...' : 'Submit'}\n                </Button>\n\n                <Button\n                  className=\"Button-cancel\"\n                  type=\"button\"\n                  onClick={() => this.toggleModal()}\n                  style={{ color: '#fff', fontSize: 12 }}>\n                  Close\n                </Button>\n              </div>\n            </form>\n          </div>\n        </Modal>\n\n        <Modal isOpen={isVotedOpen} onClose={() => this.toggleVoted()}>\n          <div className=\"Home -modal\">\n            <div className=\"Home -modal-top\">\n              <h2>Final Vote -- Wings Award 2022</h2>\n            </div>\n\n            <div className=\"Home -modal-badge\">\n              <BadgeIcon />\n            </div>\n\n            <div className=\"Home -modal-voted\">\n              Thanks for your votes! Please confirm your votes by clicking on the verification email\n              sent to {voteForm.email.value}. Please check spam if you can’t find the email.\n            </div>\n\n            <div className=\"Home -modal-categories-btn\" style={{ padding: 0 }}>\n              <Button\n                className=\"Button-brand\"\n                type=\"button\"\n                onClick={() => this.toggleVoted()}\n                style={{ backgroundColor: '#ff50e828' }}>\n                Done\n              </Button>\n            </div>\n          </div>\n        </Modal>\n\n        <div className=\"Home -hidden\">\n          <Link to={urls.Category}>category</Link>\n          <Link to={`confirmation/email/signature/voteid`}>category</Link>\n        </div>\n\n        {bg && votingEnded && (\n          <div className=\"Home -voting-ended\">\n            <div className={`Home -voting-ended-bg ${bg && '-voting-ended-bg--open'}`}></div>\n            <div\n              className={`Home -voting-ended-circle -voting-ended-circle1 ${\n                circle1 && '-voting-ended-circle1--open'\n              }`}></div>\n\n            <div\n              className={`Home -voting-ended-circle -voting-ended-circle2 ${\n                circle2 && '-voting-ended-circle2--open'\n              }`}></div>\n\n            <div\n              className={`Home -voting-ended-circle -voting-ended-circle3 ${\n                circle3 && '-voting-ended-circle3--open'\n              }`}>\n              {text && (\n                <>\n                  {' '}\n                  <VoteIcon />\n                  <h4>Voting has Ended!</h4>\n                </>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ vote }: RootState) => {\n  return {\n    vote,\n  };\n};\n\nexport default connect(mapStateToProps, { fetchCategories, clearVotes })(Home);\n","import axios from 'shared/axios';\nimport * as types from 'store/types/vote';\nimport { RootState } from 'store';\nimport categoryInterface from 'types/category';\n\nexport const addVote =\n  (category: string, nominee: string) =>\n  async (\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    dispatch: (e: { type: string; payload: any }) => void,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getState: () => RootState\n  ): Promise<void> => {\n    dispatch({ type: types.ADD_VOTE, payload: { category, nominee } });\n  };\n\nexport const clearVotes =\n  () =>\n  (\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    dispatch: (e: { type: string; payload?: any }) => void,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getState: () => RootState\n  ): void => {\n    dispatch({ type: types.CLEAR_VOTES });\n  };\n\nexport const fetchCategories =\n  () =>\n  async (\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    dispatch: (e: { type: string; payload: any }) => void,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getState: () => RootState\n  ): Promise<categoryInterface[]> => {\n    const categories = await axios.get('/category/v1/categories');\n    dispatch({\n      type: types.FETCH_CATEGORIES,\n      payload: { categories: categories.data.data },\n    });\n    return categories.data.data;\n  };\n","import React from 'react';\n\ninterface GobackProps {\n  onClick?: () => void;\n}\n\nexport const Goback = ({ onClick }: GobackProps): JSX.Element => {\n  return (\n    <svg width=\"38\" height=\"12\" viewBox=\"0 0 38 12\" fill=\"none\" onClick={onClick}>\n      <path\n        d=\"M6.10986 11.21L0.999863 6.32L6.10986 1\"\n        stroke=\"#313848\"\n        strokeWidth=\"1.5\"\n        strokeMiterlimit=\"10\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M37.4697 6.10156H1.32973\"\n        stroke=\"#313848\"\n        strokeWidth=\"1.5\"\n        strokeMiterlimit=\"10\"\n        strokeLinejoin=\"round\"\n      />\n    </svg>\n  );\n};\n\nexport default Goback;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps } from 'react-router-dom';\n\nimport { RootState } from 'store';\nimport { addVote } from 'store/actions';\nimport { IinitialState } from 'store/reducers/vote';\nimport * as urls from 'shared/routes.json';\n\nimport WingsAwardLogo from 'assets/images/wings-logo.svg';\nimport GoBackIcon from 'components/Icons/General/Goback';\nimport CategoryIcon from 'components/Icons/Categories';\nimport categoryInterface from 'types/category';\nimport Button from 'components/Button';\n\ninterface CategoryProps extends RouteComponentProps {\n  location: {\n    hash: string;\n    key: string;\n    pathname: string;\n    search: string;\n    state: {\n      category: categoryInterface;\n      prev: categoryInterface | null;\n      next: categoryInterface | null;\n    };\n  };\n  addVote: (category: string, nominee: string) => Promise<void>;\n  vote: IinitialState;\n}\n\nexport class Category extends Component<CategoryProps> {\n  state = {\n    selectedNominee: '',\n  };\n\n  componentDidMount(): void {\n    const { location, history } = this.props;\n    if (location && location.state === undefined) history.push(urls.Root);\n    window.scrollTo(0, 0);\n  }\n\n  selectNominee = (nominee: string): void => {\n    this.setState({ selectedNominee: nominee });\n  };\n\n  handleVoteCasted = async (): Promise<void> => {\n    const { selectedNominee } = this.state;\n    const { location, history, addVote } = this.props;\n    const { category } = location.state;\n\n    await addVote(category._id, selectedNominee);\n    window.alert(`Your nominee selection for ${category.name} has been recorded!`);\n    history.push(urls.Root);\n  };\n\n  render(): JSX.Element {\n    const { selectedNominee } = this.state;\n    const { location, history, vote } = this.props;\n    const { category } = (location && location.state) || {};\n    const { votes } = vote;\n\n    const alreadyVoted = votes.find(vote => vote.category === (category && category._id));\n\n    return (\n      <div className=\"Category -body\">\n        <div className=\"Category -body-inner\">\n          <div className=\"Category -logo\">\n            <img src={WingsAwardLogo} alt=\"Wings Award\" />\n          </div>\n\n          <div className=\"Category -row\">\n            <div className=\"Category -col-left\">\n              <div className=\"Category -title\">\n                {' '}\n                <GoBackIcon onClick={() => history.goBack()} /> Award Category\n              </div>\n\n              <div className=\"Category -describe\">\n                <CategoryIcon category={category && category.name} />\n                <h3>{category && category.name}</h3>\n              </div>\n\n              <div className=\"Category -description\">\n                <h3>Description</h3>\n\n                <p>{category && category.description}</p>\n              </div>\n            </div>\n\n            <div className=\"Category -col-right\">\n              <div className=\"Category -nominee-top\">\n                <div className=\"Category -title\">Nominees</div>\n                {!alreadyVoted && selectedNominee !== '' && (\n                  <Button className=\"Button-brand\" onClick={() => this.handleVoteCasted()}>\n                    Cast your vote\n                  </Button>\n                )}\n              </div>\n\n              <div className=\"Category -nominee-list\">\n                {category &&\n                  category.nominees &&\n                  category.nominees.length > 0 &&\n                  category.nominees.map((nominee, idx) => {\n                    return (\n                      <div\n                        className={`Category -nominee-item ${\n                          ((alreadyVoted && alreadyVoted.nominee === nominee._id) ||\n                            selectedNominee === nominee._id) &&\n                          '-nominee-item--selected'\n                        }`}\n                        key={nominee._id}\n                        onClick={() =>\n                          this.selectNominee(alreadyVoted ? alreadyVoted.nominee : nominee._id)\n                        }>\n                        <div className=\"Category -nominee-item-row\">\n                          <div className=\"Category -nominee-item-img\">\n                            <img src={nominee.image} alt={`Nominee ${idx + 1}`} />\n                          </div>\n\n                          <div className=\"Category -nominee-item-text\">\n                            {nominee.name}\n                            {nominee.socialHandle && `: ${nominee.socialHandle}`}\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"Category -footer\">\n            Designed and developed by{' '}\n            <a href=\"https://idarrel.netlify.app/\" rel=\"noopener noreferrer\" target=\"_blank\">\n              Darrel Idiagbor\n            </a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ vote }: RootState) => {\n  return {\n    vote,\n  };\n};\n\nexport default connect(mapStateToProps, { addVote })(Category);\n","import React from 'react';\n\nexport const Success = (): JSX.Element => {\n  return (\n    <svg width=\"147\" height=\"147\" viewBox=\"0 0 147 147\" fill=\"none\">\n      <circle cx=\"73.5\" cy=\"73.5\" r=\"73.5\" fill=\"#55294B\" />\n      <path\n        d=\"M61.6066 102.535C40.6244 100.018 34.183 64.2814 41.0471 61.2676C47.0138 58.64 54.697 65.6812 59.5979 75.3889C61.7777 79.6908 67.1091 80.2446 70.1651 76.4461C80.4108 63.7664 100.204 41.0049 106.922 45.6844C116.523 52.2986 82.3941 105.796 61.6066 102.535Z\"\n        fill=\"white\"\n      />\n    </svg>\n  );\n};\n\nexport default Success;\n","import React from 'react';\n\nexport const Failed = (): JSX.Element => {\n  return (\n    <svg width=\"147\" height=\"147\" viewBox=\"0 0 147 147\" fill=\"none\">\n      <circle cx=\"73.5\" cy=\"73.5\" r=\"73.5\" fill=\"#A62E44\" />\n      <path\n        d=\"M35.0467 106.712C39.2179 134.068 120.223 46.0929 109.779 34.8553C101.277 25.6725 33.0088 93.1626 35.0467 106.712Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M106.671 114.21C136.825 109.982 50.2338 26.7064 35.6284 37.2094C28.0168 42.6722 91.7727 116.291 106.671 114.21Z\"\n        fill=\"white\"\n      />\n    </svg>\n  );\n};\n\nexport default Failed;\n","import React, { Component } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport axios from 'shared/axios';\n\nimport WingsAwardLogo from 'assets/images/wings-logo.svg';\nimport Success from 'components/Icons/Confirmation/Success';\nimport Failed from 'components/Icons/Confirmation/Failed';\n\ninterface ConfirmationProps extends RouteComponentProps {\n  match: {\n    isExact: boolean;\n    path: string;\n    url: string;\n    params: {\n      email: string;\n      signature: string;\n      voteId: string;\n    };\n  };\n}\n\nexport class Confirmation extends Component<ConfirmationProps> {\n  state = {\n    confirmed: undefined,\n  };\n\n  async componentDidMount(): Promise<void> {\n    const { email, signature, voteId } = this.props.match.params;\n\n    try {\n      const vote = await axios.get(`/vote/v1/vote/${email}/${signature}`);\n\n      if (vote) {\n        const updatedVote = await axios.put(`/vote/v1/vote/${voteId}`, { confirmed: true });\n        if (updatedVote) this.setState({ confirmed: true });\n      }\n    } catch (err) {\n      //console.log(err.response.data);\n      this.setState({ confirmed: false });\n    }\n  }\n\n  render(): JSX.Element {\n    const { confirmed } = this.state;\n\n    return (\n      <div className=\"Confirmation -body\">\n        <div className=\"Confirmation -body-inner\">\n          <div className=\"Confirmation -logo\">\n            <img src={WingsAwardLogo} alt=\"Wings Award\" />\n          </div>\n\n          <br />\n          <br />\n\n          <div className=\"Confirmation -details\">\n            {confirmed && (\n              <>\n                <Success />\n                <p>Your Votes Have Been Successfully Confirmed!</p>\n              </>\n            )}\n\n            {confirmed === false && (\n              <>\n                <Failed />\n                <p>Your Votes Could not be confirmed!</p>\n              </>\n            )}\n\n            {confirmed === undefined && (\n              <>\n                <p>Loading...</p>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Confirmation;\n","import React from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\n\nimport * as urls from 'shared/routes.json';\n\nimport Home from 'pages/Home';\nimport Category from 'pages/Category';\nimport Confirmation from 'pages/Confirmation';\n\nfunction App(): JSX.Element {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route path={urls.Root} exact component={Home} />\n        <Route path={urls.Category} exact component={Category} />\n        <Route path={urls.Confirmation} exact component={Confirmation} />\n        <Redirect to=\"/\" />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { hydrate, render } from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport store, { persistor } from 'store';\nimport './stylesheet/main.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst rootElement = document.getElementById('root');\nif (rootElement?.hasChildNodes()) {\n  hydrate(\n    <React.StrictMode>\n      <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n          <Router>\n            <App />\n          </Router>\n        </PersistGate>\n      </Provider>\n    </React.StrictMode>,\n    rootElement\n  );\n} else {\n  render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n          <Router>\n            <App />\n          </Router>\n        </PersistGate>\n      </Provider>\n    </React.StrictMode>,\n    rootElement\n  );\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}